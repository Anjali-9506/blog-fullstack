Project Structure and Files:

blog-fullstack
/client
//node_modules
//public
//src
///assets
///components
////AboutPage.jsx
// client/src/components/AboutPage.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';

// A reusable card component for showcasing technologies and features
const InfoCard = ({ icon, title, description, color }) => (
    <div className={`relative bg-gray-800/40 border border-gray-700/50 rounded-2xl p-6 overflow-hidden group hover:border-${color}-500/50 transition-all duration-300 hover:shadow-xl hover:shadow-${color}-900/20 transform hover:-translate-y-1`}>
        <div className="absolute inset-0 -z-10 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500">
            <div className={`absolute -inset-[2px] bg-gradient-to-r from-${color}-500/10 to-cyan-400/10 rounded-xl blur-sm`}></div>
        </div>
        <div className="flex items-center gap-4 mb-4">
            <div className={`w-12 h-12 rounded-lg bg-gradient-to-br from-${color}-600/30 to-${color}-700/30 flex items-center justify-center border border-${color}-500/30`}>
                <span className="text-2xl">{icon}</span>
            </div>
            <h3 className={`text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-${color}-300 to-cyan-300`}>{title}</h3>
        </div>
        <p className="text-gray-400 leading-relaxed">{description}</p>
    </div>
);

function AboutPage() {
    const navigate = useNavigate();
    const token = localStorage.getItem('token');

    const technologies = [
        { icon: 'üíª', title: 'React', description: 'A declarative, efficient, and flexible JavaScript library for building user interfaces, powering our entire dynamic frontend.', color: 'cyan' },
        { icon: '‚öôÔ∏è', title: 'Node.js & Express', description: 'The backbone of our server, providing a fast and scalable environment for our API and real-time communication.', color: 'green' },
        { icon: 'üçÉ', title: 'MongoDB', description: 'A flexible NoSQL database that allows us to store and manage complex data structures for users, posts, and chats with ease.', color: 'emerald' },
        { icon: '‚ö°Ô∏è', title: 'Socket.IO', description: 'Enabling real-time, bi-directional communication for our instant messaging feature, making chats seamless and interactive.', color: 'yellow' },
        { icon: 'üé®', title: 'Tailwind CSS', description: 'A utility-first CSS framework that allows for rapid, custom UI development, giving the app its unique cosmic look.', color: 'sky' },
        { icon: 'üîë', title: 'JWT', description: 'JSON Web Tokens are used for securing our application, ensuring that user sessions and API requests are properly authenticated.', color: 'rose' },
    ];

    const features = [
        { icon: '‚úçÔ∏è', title: 'Dynamic Post Management', description: 'Users can create, edit, and delete their own blog posts, complete with image uploads and rich content.', color: 'purple' },
        { icon: '‚ù§Ô∏è', title: 'Social Interaction', description: 'Engage with the community through post likes, a full-featured follow/unfollow system, and user profiles.', color: 'pink' },
        { icon: 'üí¨', title: 'Real-Time Chat', description: 'A complete private messaging system with live updates, message editing, deletion, and conversation management.', color: 'indigo' },
        { icon: 'Nested Comments', title: 'Nested Comments', description: 'Deeply nested comment threads on posts allow for structured and engaging discussions within the community.', color: 'blue' },
    ];

    return (
        <div className="flex-grow bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white p-4 md:p-8 min-h-screen">
            <div className="max-w-5xl mx-auto">
                {/* Hero Section */}
                <div className="text-center py-16 md:py-24 relative">
                    <div className="absolute inset-0 -z-10">
                        <div className="absolute top-1/2 left-1/2 w-[500px] h-[500px] bg-purple-600/10 rounded-full blur-3xl -translate-x-1/2 -translate-y-1/2 animate-pulse-slow"></div>
                    </div>
                    <h1 className="text-4xl md:text-6xl font-extrabold bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent drop-shadow-lg">
                        A Cosmos of Ideas
                    </h1>
                    <p className="mt-6 text-lg md:text-xl text-gray-300/90 max-w-2xl mx-auto">
                        This platform is more than just a blog. It's a fully-featured, modern social application built from the ground up to showcase the power of the MERN stack and real-time technologies.
                    </p>
                </div>

                {/* Technology Section */}
                <section className="my-16">
                    <h2 className="text-3xl font-bold text-center mb-10">Powered by the Stars</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {technologies.map(tech => <InfoCard key={tech.title} {...tech} />)}
                    </div>
                </section>

                {/* Features Section */}
                <section className="my-16">
                    <h2 className="text-3xl font-bold text-center mb-10">Explore the Galaxy of Features</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {features.map(feature => <InfoCard key={feature.title} {...feature} />)}
                    </div>
                </section>

                {/* Creator Section */}
                <section className="my-16">
                    <div className="bg-gray-800/20 border border-gray-700/50 rounded-3xl p-8 md:p-12 backdrop-blur-lg shadow-2xl hover:shadow-purple-900/20 transition-all duration-500 group transform hover:-translate-y-1">
                        <div className="flex flex-col md:flex-row items-center gap-8">
                            <div className="relative flex-shrink-0">
                                <div className="w-32 h-32 rounded-full bg-gradient-to-r from-purple-600 to-blue-500 p-1 animate-gradient-border">
                                    <div className="bg-gray-900 rounded-full p-1.5 h-full"><div className="bg-gray-800/80 rounded-full w-full h-full flex items-center justify-center"><span className="text-4xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">ST</span></div></div>
                                </div>
                            </div>
                            <div className="text-center md:text-left">
                                <p className="text-lg text-gray-400/80 mb-1">Project Architect</p>
                                <h3 className="text-4xl font-bold mt-1 bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">Saumy Tiwari</h3>
                                <p className="mt-4 text-gray-300 max-w-lg">A passionate Full Stack Developer dedicated to building beautiful, functional, and scalable web applications. This project is a testament to the journey of learning and creating with modern web technologies.</p>
                                <div className="mt-6 flex justify-center md:justify-start gap-4">
                                    <button className="px-5 py-2 bg-gray-800/70 hover:bg-gray-700/90 border border-gray-700/50 rounded-xl text-gray-300 hover:text-white transition-all duration-300 font-medium">GitHub</button>
                                    <button className="px-5 py-2 bg-gradient-to-r from-purple-600/80 to-blue-500/80 hover:from-purple-600 hover:to-blue-500 border border-purple-500/30 rounded-xl text-white transition-all duration-300 font-medium shadow-md hover:shadow-purple-500/20">Portfolio</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                {/* Call to Action */}
                <div className="text-center py-16">
                    <h2 className="text-3xl font-bold mb-4">Ready to Join the Journey?</h2>
                    <p className="text-gray-400 mb-8 max-w-lg mx-auto">Become a part of our growing community. Share your thoughts, connect with others, and start your own blog today.</p>
                    <button
                        onClick={() => navigate(token ? '/dashboard' : '/register')}
                        className="px-8 py-4 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 rounded-xl text-white font-semibold text-lg transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-900/40 transform hover:scale-105"
                    >
                        {token ? 'Go to Your Dashboard' : 'Create an Account'}
                    </button>
                </div>
            </div>
        </div>
    );
}

export default AboutPage;

////AuthForm.jsx
import { useState } from 'react';
import api from '../utils/api';
import { useNavigate } from 'react-router-dom';

function AuthForm({ isLogin: initialIsLogin = true }) {
  const navigate = useNavigate();
  const [error, setError] = useState('');
  const [isSignUp, setIsSignUp] = useState(!initialIsLogin);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [showPassword, setShowPassword] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setError('');
    
    const formData = new FormData(e.target);
    const email = formData.get('email');
    const password = formData.get('password');
    const username = formData.get('username');

    try {
      const res = await api.post(isSignUp ? '/auth/register' : '/auth/login', {
        ...(isSignUp && { username }),
        email,
        password,
      });

      localStorage.setItem('token', res.data.token);
      console.log("AuthForm.jsx: New token set for login/register:", res.data.token ? res.data.token.substring(0,15)+"..." : "N/A");
      navigate('/dashboard');
    } catch (err) {
      setError(err.response?.data?.error || 'Something went wrong');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-950 p-4 relative overflow-hidden">
      {/* Cosmic Background */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none z-0">
        {/* Animated Nebula Layers */}
        <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-purple-900/10 via-gray-950 to-gray-950"></div>
        
        {/* Stars with different sizes and intensities */}
        {[...Array(200)].map((_, i) => {
          const size = Math.random() * 4 + 1;
          const opacity = Math.random() * 0.8 + 0.2;
          const duration = Math.random() * 15 + 5;
          return (
            <div 
              key={i}
              className="absolute rounded-full animate-twinkle"
              style={{
                top: `${Math.random() * 100}%`,
                left: `${Math.random() * 100}%`,
                width: `${size}px`,
                height: `${size}px`,
                background: `rgba(255, 255, 255, ${opacity})`,
                animationDelay: `${Math.random() * 10}s`,
                animationDuration: `${duration}s`,
                filter: `blur(${size > 2 ? 0.5 : 0}px)`,
              }}
            />
          );
        })}
        
        {/* Floating Cosmic Particles */}
        {[...Array(25)].map((_, i) => {
          const size = Math.random() * 10 + 5;
          const color = i % 4 === 0 ? '139, 92, 246' : 
                         i % 4 === 1 ? '99, 102, 241' : 
                         i % 4 === 2 ? '236, 72, 153' : '6, 182, 212';
          return (
            <div 
              key={`particle-${i}`}
              className="absolute rounded-full animate-float"
              style={{
                '--random-x': Math.random() * 2 - 1,
                top: `${Math.random() * 100 + 10}%`,
                left: `${Math.random() * 100}%`,
                width: `${size}px`,
                height: `${size}px`,
                background: `radial-gradient(circle, rgba(${color}, ${Math.random() * 0.7 + 0.3}) 0%, rgba(${color}, 0) 70%)`,
                filter: `blur(${size > 8 ? 1.5 : 1}px)`,
                animationDelay: `${i * 0.3}s`,
                animationDuration: `${Math.random() * 30 + 20}s`,
              }}
            />
          );
        })}
        
        {/* Shooting Stars */}
        {[...Array(3)].map((_, i) => (
          <div
            key={`shooting-${i}`}
            className="absolute animate-shooting-star"
            style={{
              top: `${Math.random() * 30}%`,
              left: `${Math.random() * 100}%`,
              width: '120px',
              height: '2px',
              background: 'linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.8) 50%, rgba(255,255,255,0) 100%)',
              transform: `rotate(${Math.random() * 30 - 15}deg)`,
              animationDelay: `${i * 10}s`,
              animationDuration: `${Math.random() * 2 + 1}s`,
            }}
          />
        ))}
      </div>
      
      {/* Nebula Glow Effects */}
      <div className="fixed -top-1/3 -left-1/4 w-[800px] h-[800px] bg-purple-900/15 rounded-full filter blur-[180px] animate-pulse-slow opacity-80"></div>
      <div className="fixed -bottom-1/4 -right-1/4 w-[700px] h-[700px] bg-blue-900/20 rounded-full filter blur-[150px] animate-pulse-slower opacity-70"></div>
      <div className="fixed top-1/4 right-1/4 w-[500px] h-[500px] bg-cyan-900/15 rounded-full filter blur-[120px] animate-pulse-delayed opacity-60"></div>
      <div className="fixed bottom-1/3 left-1/3 w-[600px] h-[600px] bg-pink-900/10 rounded-full filter blur-[130px] animate-pulse-slowest opacity-50"></div>

      {/* Main Card */}
      <div className="relative w-full max-w-md backdrop-blur-2xl bg-gradient-to-br from-gray-900/70 via-gray-950/80 to-gray-950/90 border border-gray-800/50 rounded-3xl shadow-2xl overflow-hidden transform transition-all duration-700 ease-in-out hover:shadow-[0_0_50px_10px_rgba(139,92,246,0.2)] z-10 group/card">
        {/* Animated Holographic Border */}
        <div className="absolute inset-0 rounded-3xl p-[2px] overflow-hidden">
          <div className="absolute inset-0 bg-[conic-gradient(from_180deg_at_50%_50%,#3b82f6_0deg,#8b5cf6_120deg,#ec4899_240deg,#3b82f6_360deg)] opacity-40 animate-spin-slow"></div>
          <div className="absolute inset-[2px] bg-gradient-to-br from-gray-900/90 to-gray-950/90 rounded-3xl"></div>
        </div>

        {/* Interactive Inner Glow */}
        <div className="absolute inset-0 rounded-3xl pointer-events-none transition-all duration-500 group-hover/card:shadow-[inset_0_0_40px_10px_rgba(139,92,246,0.15)]"></div>

        <div className="relative p-8 z-10">
          {/* Logo Header with Enhanced Effects */}
          <div className="flex flex-col items-center justify-center mb-10">
            <div className="relative w-24 h-24 mb-6 group/logo">
              {/* Glow Effect */}
              <div className="absolute inset-0 bg-gradient-to-br from-purple-600/60 to-blue-500/60 rounded-2xl opacity-80 blur-xl group-hover/logo:opacity-100 group-hover/logo:blur-2xl transition-all duration-700"></div>
              
              {/* Holographic Ring */}
              <div className="absolute inset-0 rounded-full border-2 border-purple-400/30 opacity-0 group-hover/logo:opacity-100 group-hover/logo:animate-ping-slow transition-opacity duration-500"></div>
              
              {/* Logo Container */}
              <div className="relative w-24 h-24 bg-gradient-to-br from-purple-600 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg group-hover/logo:rotate-3 transition-transform duration-300 overflow-hidden">
                {/* Subtle Inner Glow */}
                <div className="absolute inset-0 bg-white/5"></div>
                
                {/* Logo Image */}
                <img 
                  src={"http://localhost:5000/images/Blog.svg"} 
                  className="w-14 h-14 transition-all duration-500 group-hover/logo:scale-110 group-hover/logo:brightness-110"
                  alt="App Icon"
                />
              </div>
            </div>
            
            <h1 className="text-4xl font-bold bg-gradient-to-r from-purple-300 via-blue-300 to-cyan-300 bg-clip-text text-transparent tracking-tight">
              {isSignUp ? 'Welcome!' : 'Welcome Back!'}
            </h1>
            <p className="text-gray-400/90 mt-3 text-center max-w-xs text-sm leading-relaxed">
              {isSignUp ? 'Join our cosmic community to begin your journey' : 'Sign in to continue your stellar adventure'}
            </p>
          </div>

          {/* Error Message with Enhanced Animation */}
          {error && (
            <div className="relative mb-6 overflow-hidden rounded-xl animate-shake">
              <div className="absolute inset-0 bg-gradient-to-r from-red-900/50 to-red-800/50 border border-red-700/50 backdrop-blur-sm"></div>
              <div className="relative px-4 py-3 text-red-100 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 flex-shrink-0" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                </svg>
                <span>{error}</span>
              </div>
            </div>
          )}

          {/* Form */}
          <form onSubmit={handleSubmit} className="space-y-6">
            {isSignUp && (
              <div className="relative group">
                <div className="absolute -inset-0.5 bg-gradient-to-r from-purple-600/30 to-blue-500/30 rounded-xl blur-sm opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                <div className="relative bg-gray-900/50 rounded-xl border border-gray-800/50 group-hover:border-purple-500/30 transition-all duration-300 overflow-hidden">
                  {/* Input Field Glow */}
                  <div className="absolute inset-0 shadow-[inset_0_0_10px_0_rgba(139,92,246,0.1)] opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                  
                  <label htmlFor="username" className="block text-xs font-medium text-gray-400 uppercase tracking-wider mb-1 px-4 pt-3">
                    Username
                  </label>
                  <div className="relative px-4 pb-3">
                    <input
                      name="username"
                      id="username"
                      type="text"
                      placeholder="Enter your username"
                      required={isSignUp}
                      className="w-full bg-transparent text-white placeholder-gray-600 focus:outline-none focus:ring-0 border-none p-0"
                    />
                    <div className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
            )}

            <div className="relative group">
              <div className="absolute -inset-0.5 bg-gradient-to-r from-purple-600/30 to-blue-500/30 rounded-xl blur-sm opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative bg-gray-900/50 rounded-xl border border-gray-800/50 group-hover:border-purple-500/30 transition-all duration-300 overflow-hidden">
                {/* Input Field Glow */}
                <div className="absolute inset-0 shadow-[inset_0_0_10px_0_rgba(99,102,241,0.1)] opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                
                <label htmlFor="email" className="block text-xs font-medium text-gray-400 uppercase tracking-wider mb-1 px-4 pt-3">
                  Email
                </label>
                <div className="relative px-4 pb-3">
                  <input
                    name="email"
                    id="email"
                    type="email"
                    placeholder="Enter your email"
                    required
                    className="w-full bg-transparent text-white placeholder-gray-600 focus:outline-none focus:ring-0 border-none p-0"
                  />
                  <div className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
              </div>
            </div>

            <div className="relative group">
              <div className="absolute -inset-0.5 bg-gradient-to-r from-purple-600/30 to-blue-500/30 rounded-xl blur-sm opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div className="relative bg-gray-900/50 rounded-xl border border-gray-800/50 group-hover:border-purple-500/30 transition-all duration-300 overflow-hidden">
                {/* Input Field Glow */}
                <div className="absolute inset-0 shadow-[inset_0_0_10px_0_rgba(6,182,212,0.1)] opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                
                <label htmlFor="password" className="block text-xs font-medium text-gray-400 uppercase tracking-wider mb-1 px-4 pt-3">
                  Password
                </label>
                <div className="relative px-4 pb-3">
                  <input
                    name="password"
                    id="password"
                    type={showPassword ? "text" : "password"}
                    required
                    className="w-full bg-transparent text-white placeholder-gray-600 focus:outline-none focus:ring-0 border-none p-0"
                    placeholder="Enter your password"
                  />
                  <div className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-500">
                    <button
                      type="button"
                      onClick={() => setShowPassword(!showPassword)}
                      className="focus:outline-none transition-transform hover:scale-110 active:scale-95"
                    >
                      {showPassword ? (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                        </svg>
                      ) : (
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                      )}
                    </button>
                  </div>
                </div>
              </div>
            </div>

            {/* Submit Button with Enhanced Effects */}
            <div className="pt-2">
              <button
                type="submit"
                disabled={isSubmitting}
                className={`w-full py-4 px-6 rounded-xl text-white font-semibold text-lg transition-all duration-500 relative overflow-hidden group/btn
                  ${isSubmitting ? 'bg-gray-800 cursor-not-allowed' : 'bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700'}`}
              >
                {/* Button Glow */}
                <div className="absolute inset-0 bg-gradient-to-r from-purple-500/30 to-blue-500/30 opacity-0 group-hover/btn:opacity-100 transition-opacity duration-300"></div>
                
                {/* Button Border Animation */}
                <div className="absolute inset-0 rounded-xl border border-white/10 group-hover/btn:border-white/20 transition-all duration-500"></div>
                
                {/* Button Content */}
                <span className="relative z-10 flex items-center justify-center gap-2">
                  {isSubmitting ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      <span>Authenticating...</span>
                    </>
                  ) : (
                    <>
                      <span>{isSignUp ? 'Create Account' : 'Sign In'}</span>
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-1 transition-transform group-hover/btn:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
                      </svg>
                    </>
                  )}
                </span>
                
                {/* Ripple Effect */}
                <div className="absolute inset-0 overflow-hidden">
                  <div className="absolute top-1/2 left-1/2 w-0 h-0 rounded-full bg-white/10 group-hover/btn:w-[300px] group-hover/btn:h-[300px] group-hover/btn:-translate-x-1/2 group-hover/btn:-translate-y-1/2 transition-all duration-700 ease-out"></div>
                </div>
              </button>
            </div>
          </form>

          {/* Toggle Link with Enhanced Animation */}
          <div className="mt-8 text-center">
            <button
              onClick={() => setIsSignUp(!isSignUp)}
              className="text-sm font-medium text-gray-400 hover:text-white transition-colors group/link relative"
              type="button"
            >
              {isSignUp ? (
                <span>Already have an account? <span className="text-purple-300 group-hover/link:text-purple-200 underline underline-offset-4 decoration-purple-500/50 hover:decoration-purple-400 transition-all">Sign In</span></span>
              ) : (
                <span>Don't have an account? <span className="text-blue-300 group-hover/link:text-blue-200 underline underline-offset-4 decoration-blue-500/50 hover:decoration-blue-400 transition-all">Register</span></span>
              )}
              {/* Underline animation */}
              <span className="absolute bottom-0 left-0 w-0 h-px bg-gradient-to-r from-purple-400 to-blue-400 group-hover/link:w-full transition-all duration-300"></span>
            </button>
          </div>
        </div>
      </div>
      
      {/* Animation Keyframes */}
      <style jsx>{`
        @keyframes float {
          0% { transform: translateY(0) translateX(0) rotate(0deg); opacity: 1; }
          100% { transform: translateY(-100vh) translateX(calc(var(--random-x) * 100px)) rotate(360deg); opacity: 0; }
        }
        @keyframes twinkle {
          0%, 100% { opacity: 0.2; }
          50% { opacity: 1; }
        }
        @keyframes shooting-star {
          0% { transform: translateX(0) translateY(0) rotate(var(--rotation)); opacity: 0; }
          10% { opacity: 1; }
          100% { transform: translateX(500px) translateY(200px) rotate(var(--rotation)); opacity: 0; }
        }
        @keyframes spin-slow {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        @keyframes pulse-slow {
          0%, 100% { opacity: 0.3; }
          50% { opacity: 0.7; }
        }
        @keyframes pulse-slower {
          0%, 100% { opacity: 0.2; }
          50% { opacity: 0.5; }
        }
        @keyframes pulse-slowest {
          0%, 100% { opacity: 0.1; }
          50% { opacity: 0.3; }
        }
        @keyframes pulse-delayed {
          0%, 60% { opacity: 0.3; }
          80% { opacity: 0.7; }
          100% { opacity: 0.3; }
        }
        @keyframes ping-slow {
          0% { transform: scale(1); opacity: 1; }
          100% { transform: scale(1.5); opacity: 0; }
        }
        @keyframes shake {
          0%, 100% { transform: translateX(0); }
          10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
          20%, 40%, 60%, 80% { transform: translateX(5px); }
        }
        .animate-float {
          animation: float linear forwards;
        }
        .animate-twinkle {
          animation: twinkle ease-in-out infinite;
        }
        .animate-shooting-star {
          animation: shooting-star linear forwards;
        }
        .animate-spin-slow {
          animation: spin-slow 20s linear infinite;
        }
        .animate-pulse-slow {
          animation: pulse-slow 8s ease-in-out infinite;
        }
        .animate-pulse-slower {
          animation: pulse-slower 12s ease-in-out infinite;
        }
        .animate-pulse-slowest {
          animation: pulse-slowest 15s ease-in-out infinite;
        }
        .animate-pulse-delayed {
          animation: pulse-delayed 10s ease-in-out infinite;
        }
        .animate-ping-slow {
          animation: ping-slow 2s cubic-bezier(0, 0, 0.2, 1) infinite;
        }
        .animate-shake {
          animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }
      `}</style>
    </div>
  );
}

export default AuthForm;

////ChatPage.jsx
// client/src/components/ChatPage.jsx
import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import ConversationList from './ConversationList';
import MessageContainer from './MessageContainer';
import api from '../utils/api';

function ChatPage() {
  const [conversations, setConversations] = useState([]);
  const [hiddenConversations, setHiddenConversations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedConversation, setSelectedConversation] = useState(null);
  const [showHidden, setShowHidden] = useState(false);
  const location = useLocation();

  const fetchConversations = async () => {
    try {
      setLoading(true);
      const res = await api.get('/chat/conversations');
      const fetchedConversations = res.data;
      setConversations(fetchedConversations);
      
      const preSelectedConv = location.state?.selectedConversation;
      if (preSelectedConv) {
        const fullConv = fetchedConversations.find(c => c._id === preSelectedConv._id);
        setSelectedConversation(fullConv || preSelectedConv);
      }
    } catch (error) {
      console.error("Failed to fetch conversations", error);
    } finally {
      setLoading(false);
    }
  };
  
  const fetchHiddenConversations = async () => {
    try {
        setLoading(true);
        const res = await api.get('/chat/conversations/hidden');
        setHiddenConversations(res.data);
    } catch (error) {
        console.error("Failed to fetch hidden conversations", error);
    } finally {
        setLoading(false);
    }
  };

  useEffect(() => {
    if (showHidden) {
      fetchHiddenConversations();
    } else {
      fetchConversations();
    }
  }, [location.state, showHidden]);

  const handleAction = async (action, conversationId) => {
    try {
      if (action === 'hide') {
        await api.post(`/chat/conversations/${conversationId}/hide`);
        setConversations(prev => prev.filter(c => c._id !== conversationId));
      } else if (action === 'unhide') {
        await api.post(`/chat/conversations/${conversationId}/unhide`);
        setHiddenConversations(prev => prev.filter(c => c._id !== conversationId));
      }
      if (selectedConversation?._id === conversationId) {
        setSelectedConversation(null); // Deselect if the current chat is acted upon
      }
    } catch (error) {
      console.error(`Failed to ${action} conversation`, error);
    }
  };
  
  const handleToggleHidden = () => {
    setShowHidden(!showHidden);
    setSelectedConversation(null); // Deselect conversation when switching lists
  };

  return (
    <div className="flex-grow flex h-[calc(100vh-140px)] bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white p-4 md:p-6 gap-6">
      <div className="flex w-full h-full bg-gray-900/50 backdrop-blur-lg border border-gray-700/50 rounded-2xl shadow-2xl shadow-purple-900/20 overflow-hidden">
        <ConversationList
          conversations={showHidden ? hiddenConversations : conversations}
          loading={loading}
          onSelectConversation={setSelectedConversation}
          selectedConversation={selectedConversation}
          onAction={handleAction}
          isHiddenList={showHidden}
          onToggleHidden={handleToggleHidden}
        />
        <MessageContainer selectedConversation={selectedConversation} />
      </div>
    </div>
  );
}

export default ChatPage;

////Comment.jsx
// client/src/components/Comment.jsx
import React, { useState } from 'react';
import api from '../utils/api';

// ReplyForm sub-component (can be in its own file if preferred)
function ReplyForm({ postId, parentId, onCommentAdded, onCancel, currentUserId }) {
    const [content, setContent] = useState('');
    const [isSubmitting, setIsSubmitting] = useState(false);

    const handleSubmit = async (e) => {
        e.preventDefault();
        if (!content.trim() || !currentUserId) return; // Ensure user is logged in
        setIsSubmitting(true);
        try {
            const res = await api.post(`/comments/${postId}/comments`, {
                content,
                parentId,
            });
            onCommentAdded(res.data);
            setContent('');
            if (onCancel) onCancel();
        } catch (err) {
            console.error('Failed to add reply', err);
            // Consider adding user-facing error message
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <form onSubmit={handleSubmit} className="mt-3 ml-8 pl-3 border-l-2 border-gray-700/50">
            <textarea
                value={content}
                onChange={(e) => setContent(e.target.value)}
                placeholder="Write a reply..."
                className="w-full px-3 py-2 bg-gray-700/80 border border-gray-600/70 rounded-lg text-white placeholder-gray-400 focus:border-purple-500/70 focus:outline-none focus:ring-1 focus:ring-purple-900/30 text-sm"
                rows="2"
                required
            />
            <div className="mt-2 flex items-center gap-2">
                <button
                    type="submit"
                    disabled={isSubmitting || !currentUserId}
                    className="px-3 py-1.5 text-xs font-medium rounded-md bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white transition-all duration-300 disabled:opacity-60"
                >
                    {isSubmitting ? 'Replying...' : 'Post Reply'}
                </button>
                {onCancel && (
                    <button
                        type="button"
                        onClick={onCancel}
                        className="px-3 py-1.5 text-xs font-medium rounded-md bg-gray-600 hover:bg-gray-500 text-gray-200 transition-all duration-300"
                    >
                        Cancel
                    </button>
                )}
            </div>
        </form>
    );
}


// Main Comment Component
function Comment({ comment, currentUserId, onDeleteComment, onCommentAdded, allCommentsForPost, level = 0 }) {
    const isAuthor = comment.author && comment.author._id === currentUserId;
    const [showReplyForm, setShowReplyForm] = useState(false);

    // Filter direct replies for the current comment from the flat list
    const replies = allCommentsForPost
        .filter(c => c.parentId === comment._id)
        .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));

    const getAvatarSrc = (author) => {
        if (!author) return `https://ui-avatars.com/api/?name=?&background=71717a&color=fff&size=128`; // Default for missing author
        if (author.avatar && author.avatar.startsWith('http')) {
            return author.avatar;
        }
        if (author.avatar) { // Assuming relative path like /images/avatar.jpg
            return `http://localhost:5000${author.avatar}`;
        }
        return `https://ui-avatars.com/api/?name=${encodeURIComponent(author.username || 'User')}&background=random&color=fff&size=128`;
    };

    const avatarSrc = getAvatarSrc(comment.author);
    const authorUsername = comment.author ? comment.author.username : 'Anonymous';

    return (
        <div
            className={`relative group transition-all duration-300 ${level > 0 ? `ml-4 md:ml-6 lg:ml-8 pl-4 border-l-2 border-gray-700/30` : ''} mb-4`}
        >
            <div className="bg-gradient-to-b from-gray-800/[.65] to-gray-900/[.75] border border-gray-700/60 rounded-xl p-3 md:p-4 hover:border-purple-500/40 hover:shadow-lg hover:shadow-purple-900/15">
                {/* Decorative element can be conditional on level or removed for replies */}
                {level === 0 && <div className="absolute top-0 right-0 w-8 h-8 bg-gradient-to-l from-purple-500/10 to-transparent rounded-bl-full opacity-70 group-hover:opacity-100"></div>}

                <div className="flex items-start gap-3 md:gap-4 relative z-10">
                    <div className="relative flex-shrink-0">
                        <div className={`w-10 h-10 md:w-12 md:h-12 rounded-full bg-gradient-to-br from-purple-600 to-blue-500 p-0.5 shadow-md`}>
                            <div className="bg-gray-900 rounded-full p-0.5 md:p-1 h-full">
                                <img
                                    src={avatarSrc}
                                    alt={authorUsername}
                                    className="w-full h-full rounded-full object-cover"
                                />
                            </div>
                        </div>
                    </div>

                    <div className="flex-1 min-w-0">
                        <div className="relative">
                            {/* Speech Bubble Tail (optional for top-level only) */}
                            {level === 0 && (
                                <div className="absolute top-3 -left-2.5 md:-left-3.5 w-3 h-3 bg-gray-800/[.85] rotate-45 border-l border-b border-gray-700/60 transform -translate-x-1/2"></div>
                            )}

                            <div className={`bg-gray-800/80 backdrop-blur-sm border border-gray-700/50 p-3 md:p-4 rounded-xl ${level === 0 ? 'rounded-tl-none' : ''}`}>
                                <div className="flex justify-between items-start mb-1">
                                    <h4 className="font-semibold text-sm md:text-base text-white group-hover:text-purple-300 transition-colors">
                                        {authorUsername}
                                    </h4>
                                    <span className="text-xs text-gray-400 whitespace-nowrap">
                                        {new Date(comment.createdAt).toLocaleDateString('en-US', {
                                            month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit'
                                        })}
                                    </span>
                                </div>
                                <p className="text-gray-300 text-sm md:text-base leading-relaxed break-words">
                                    {comment.content}
                                </p>
                            </div>
                        </div>

                        <div className="mt-2.5 flex items-center gap-3">
                            {currentUserId && ( // Only show reply button if user is logged in
                                <button
                                    onClick={() => setShowReplyForm(!showReplyForm)}
                                    className="flex items-center gap-1 px-2.5 py-1 text-xs bg-gray-700/60 border border-gray-600/70 rounded-lg text-gray-300 hover:text-purple-300 hover:border-purple-500/50 hover:bg-purple-900/30 transition-all duration-300"
                                    aria-expanded={showReplyForm}
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6" /></svg>
                                    Reply
                                </button>
                            )}
                            {isAuthor && (
                                <button
                                    onClick={() => onDeleteComment(comment._id, comment.post)}
                                    className="flex items-center gap-1 px-2.5 py-1 text-xs bg-gray-700/60 border border-gray-600/70 rounded-lg text-gray-400 hover:text-red-400 hover:border-red-500/50 hover:bg-red-900/20 transition-all duration-300"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                                    Delete
                                </button>
                            )}
                        </div>

                        {showReplyForm && currentUserId && (
                            <ReplyForm
                                postId={comment.post}
                                parentId={comment._id}
                                onCommentAdded={onCommentAdded} // This function should update allCommentsForPost in Dashboard
                                onCancel={() => setShowReplyForm(false)}
                                currentUserId={currentUserId}
                            />
                        )}
                    </div>
                </div>
            </div>

            {/* Render Replies Recursively */}
            {replies.length > 0 && (
                <div className="mt-4">
                    {replies.map(reply => (
                        <Comment
                            key={reply._id}
                            comment={reply}
                            currentUserId={currentUserId}
                            onDeleteComment={onDeleteComment}
                            onCommentAdded={onCommentAdded}
                            allCommentsForPost={allCommentsForPost}
                            level={level + 1}
                        />
                    ))}
                </div>
            )}
        </div>
    );
}

export default Comment;

////ConversationList.jsx
// client/src/components/ConversationList.jsx
import { useEffect, useState, useRef } from 'react';
import api from '../utils/api';
import { useSocket } from '../context/SocketContext';

// Single Conversation Item Component
function Conversation({ conversation, onSelect, isSelected, onAction, isHiddenList }) {
  const { onlineUsers } = useSocket();
  const [menuOpen, setMenuOpen] = useState(false);
  const menuRef = useRef(null);
  const otherUser = conversation.participants[0];
  
  // Close menu when clicking outside
  useEffect(() => {
    function handleClickOutside(event) {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        setMenuOpen(false);
      }
    }
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, [menuRef]);

  if (!otherUser) return null;
  const isOnline = onlineUsers.includes(otherUser._id);

  const handleAction = async (action) => {
    setMenuOpen(false); // Close menu on action
    await onAction(action, conversation._id);
  };

  return (
    <div
      onClick={() => onSelect(conversation)}
      className={`flex items-center gap-3 p-3 rounded-xl cursor-pointer transition-all duration-200 group relative ${
        isSelected ? 'bg-purple-900/40' : 'hover:bg-gray-700/50'
      }`}
    >
      {/* ... (Avatar and User Info remains the same) ... */}
      <div className="relative">
        <div className="w-12 h-12 rounded-full bg-gradient-to-br from-purple-600 to-blue-500 p-0.5"><img src={`http://localhost:5000${otherUser.avatar}`} alt={otherUser.username} className="w-full h-full rounded-full object-cover bg-gray-900" /></div>
        {isOnline && <div className="absolute bottom-0 right-0 w-3 h-3 bg-green-400 rounded-full border-2 border-gray-800 animate-pulse"></div>}
      </div>
      <div className="flex-1 min-w-0">
        <p className="font-semibold text-white truncate">{otherUser.username}</p>
        <p className="text-xs text-gray-400 truncate">{conversation.lastMessage?.content || 'No messages yet'}</p>
      </div>

      {/* More Options Button */}
      <button onClick={(e) => { e.stopPropagation(); setMenuOpen(!menuOpen); }} className="p-1 rounded-full text-gray-400 hover:bg-gray-600/50 hover:text-white transition-colors opacity-0 group-hover:opacity-100">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 5v.01M12 12v.01M12 19v.01" /></svg>
      </button>

      {/* Options Menu Dropdown */}
      {menuOpen && (
        <div ref={menuRef} className="absolute top-10 right-2 w-40 bg-gray-800 border border-gray-700 rounded-lg shadow-xl z-10 py-1">
          <button onClick={() => handleAction(isHiddenList ? 'unhide' : 'hide')} className="w-full text-left px-4 py-2 text-sm text-gray-200 hover:bg-purple-800/50">
            {isHiddenList ? 'Unhide Chat' : 'Hide Chat'}
          </button>
        </div>
      )}
    </div>
  );
}

// Main List Component is now much simpler
function ConversationList({ conversations, loading, onSelectConversation, selectedConversation, onAction, isHiddenList, onToggleHidden }) {
  return (
    <div className="w-1/3 border-r border-gray-700/50 flex flex-col">
      <div className="p-4 border-b border-gray-700/50 flex justify-between items-center">
        <h2 className="text-xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">
          {isHiddenList ? 'Hidden Chats' : 'Chats'}
        </h2>
        <button onClick={onToggleHidden} title="Toggle Hidden Chats" className="p-2 rounded-full hover:bg-gray-700">
            {isHiddenList ? <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-300" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm-7-8a7 7 0 1114 0 7 7 0 01-14 0zm7-5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clipRule="evenodd" /></svg> : <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-300" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 000 2h6a1 1 0 100-2H7z" clipRule="evenodd" /></svg>}
        </button>
      </div>
      <div className="flex-1 overflow-y-auto p-2 custom-scrollbar">
        {loading && <div className="text-center p-4 text-gray-400">Loading...</div>}
        {!loading && conversations.length === 0 && (
          <div className="text-center p-4 text-gray-500">{isHiddenList ? 'No hidden chats.' : 'No conversations started.'}</div>
        )}
        <div className="space-y-1">
          {!loading && conversations.map((conv) => (
            <Conversation
              key={conv._id}
              conversation={conv}
              onSelect={onSelectConversation}
              isSelected={selectedConversation?._id === conv._id}
              onAction={onAction}
              isHiddenList={isHiddenList}
            />
          ))}
        </div>
      </div>
    </div>
  );
}
export default ConversationList;

////CreatePost.jsx
import { useState } from 'react';
import api from '../utils/api';
import { useNavigate } from 'react-router-dom';

function CreatePost() {
  const navigate = useNavigate();
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [image, setImage] = useState(null);
  const [imagePreview, setImagePreview] = useState(null);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append('title', title);
      formData.append('content', content);
      if (image) {
        formData.append('image', image);
      }
      await api.post('/posts', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      navigate('/dashboard');
    } catch (err) {
      console.error('Error creating post:', err);
    }
  };

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setImagePreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  }

  return (
    <div className="flex-grow bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white p-4 md:p-8 min-h-screen">
      {/* Animated Background Elements */}
      <div className="fixed inset-0 overflow-hidden -z-10">
        {[...Array(12)].map((_, i) => (
          <div 
            key={i}
            className="absolute rounded-full animate-float"
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              width: `${Math.random() * 10 + 5}px`,
              height: `${Math.random() * 10 + 5}px`,
              background: `rgba(${i % 3 === 0 ? '139, 92, 246' : i % 3 === 1 ? '59, 130, 246' : '6, 182, 212'}, ${Math.random() * 0.2 + 0.05})`,
              animationDuration: `${Math.random() * 20 + 10}s`,
              animationDelay: `${Math.random() * 5}s`,
            }}
          ></div>
        ))}
      </div>

      <div className="max-w-3xl mx-auto mt-8 md:mt-16">
        <div className="relative bg-gray-900/70 backdrop-blur-lg border border-gray-700/50 rounded-3xl shadow-2xl shadow-purple-900/20 overflow-hidden transition-all duration-500 hover:shadow-purple-900/30">
          {/* Decorative Gradient Elements */}
          <div className="absolute top-0 left-0 w-1/3 h-full bg-gradient-to-r from-purple-900/15 via-purple-900/5 to-transparent"></div>
          <div className="absolute bottom-0 right-0 w-1/3 h-full bg-gradient-to-l from-blue-900/15 via-blue-900/5 to-transparent"></div>
          
          <div className="relative z-10 p-8 md:p-10">
            {/* Header Section */}
            <div className="mb-10 text-center group">
              <h2 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent inline-block">
                Craft Your Story
              </h2>
              <p className="text-gray-400/90 mt-3 text-lg max-w-md mx-auto">
                Share your unique perspective with the world
              </p>
              <div className="mt-4 h-1 w-20 bg-gradient-to-r from-purple-600 to-blue-500 rounded-full mx-auto opacity-80 group-hover:w-32 transition-all duration-500"></div>
            </div>
            
            <form onSubmit={handleSubmit} className="space-y-8">
              {/* Title Field */}
              <div className="group">
                <label htmlFor="title" className="block text-sm font-medium text-gray-300/90 mb-3 ml-1">
                  <span className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">Post Title</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <input
                    id="title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    required
                    className="relative w-full px-5 py-4 bg-gray-800/70 border border-gray-700/50 rounded-xl text-white placeholder-gray-500/70 focus:border-purple-500/70 focus:outline-none focus:ring-2 focus:ring-purple-900/20 transition-all duration-300"
                    placeholder="Give your post a title..."
                  />
                </div>
              </div>
              
              {/* Content Field */}
              <div className="group">
                <label htmlFor="content" className="block text-sm font-medium text-gray-300/90 mb-3 ml-1">
                  <span className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">Your Content</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <textarea
                    id="content"
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                    required
                    rows={8}
                    className="relative w-full px-5 py-4 bg-gray-800/70 border border-gray-700/50 rounded-xl text-white placeholder-gray-500/70 focus:border-purple-500/70 focus:outline-none focus:ring-2 focus:ring-purple-900/20 transition-all duration-300"
                    placeholder="Pour your thoughts onto the page..."
                  ></textarea>
                </div>
              </div>
              
              {/* Image Upload */}
              <div className="group">
                <label htmlFor="image" className="block text-sm font-medium text-gray-300/90 mb-3 ml-1">
                  <span className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">Featured Image (Optional)</span>
                </label>
                
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <div className="relative flex flex-col items-center justify-center border-2 border-dashed border-gray-700/50 rounded-xl p-10 text-center bg-gray-900/30 hover:border-purple-500/50 transition-all duration-500 cursor-pointer overflow-hidden">
                    <div className="relative z-10">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-14 w-14 text-gray-500/80 mb-4 group-hover:text-purple-400 transition-colors duration-300 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <p className="text-gray-400/90 group-hover:text-gray-300 transition-colors duration-300 text-lg">
                        {image ? 'Perfect! Image selected' : 'Drag & drop or click to upload'}
                      </p>
                      <p className="text-sm text-gray-500/70 mt-2">Supports: JPG, PNG, GIF (Max 10MB)</p>
                    </div>
                    <input
                      type="file"
                      id="image"
                      name="image"
                      accept="image/*"
                      onChange={handleImageChange}
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    />
                  </div>
                </div>
                
                {imagePreview && (
                  <div className="mt-6 border border-gray-700/50 rounded-xl overflow-hidden transition-all duration-500 group">
                    <div className="relative">
                      <img 
                        src={imagePreview} 
                        alt="Preview" 
                        className="w-full h-80 object-cover group-hover:opacity-90 transition-opacity duration-300"
                      />
                      <button
                        type="button"
                        onClick={() => {
                          setImagePreview(null);
                          setImage(null);
                        }}
                        className="absolute top-4 right-4 bg-gray-900/80 hover:bg-red-600/90 rounded-full p-2 transition-all duration-300 shadow-lg"
                        title="Remove image"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-400 hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    <div className="p-4 bg-gray-800/50 text-center text-sm text-gray-400/80 border-t border-gray-700/50">
                      Your stunning visual preview
                    </div>
                  </div>
                )}
              </div>
              
              {/* Action Buttons */}
              <div className="flex gap-5 pt-6">
                <button
                  type="button"
                  onClick={() => navigate('/dashboard')}
                  className="flex-1 py-4 px-6 bg-gray-800/70 hover:bg-gray-700/90 border border-gray-700/50 rounded-xl text-gray-300 hover:text-red-400 font-medium flex items-center justify-center gap-3 transition-all duration-300 shadow-md hover:shadow-red-900/20 group"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400 group-hover:text-red-400 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                  <span>Discard</span>
                  <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-transparent via-red-500 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </button>
                
                <button
                  type="submit"
                  className="flex-1 py-4 px-6 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 rounded-xl text-white font-semibold transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-900/40 flex items-center justify-center gap-3 group relative overflow-hidden"
                >
                  <span className="relative z-10 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                    </svg>
                    Publish Post
                  </span>
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-700/30 to-indigo-700/30 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-cyan-400 to-blue-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Animation Styles */}
      <style jsx global>{`
        @keyframes float {
          0% { transform: translateY(0) rotate(0deg); }
          50% { transform: translateY(-20px) rotate(5deg); }
          100% { transform: translateY(0) rotate(0deg); }
        }
        .animate-float {
          animation: float linear infinite;
        }
      `}</style>
    </div>
  );
}

export default CreatePost;

////Dashboard.jsx
// client/src/components/Dashboard.jsx
import { useEffect, useState, useCallback } from 'react';
import api from '../utils/api';
import { useNavigate } from 'react-router-dom';
import Profile from './Profile';
import LikeButton from './LikeButton';
import Comment from './Comment'; // Your updated Comment component

// Helper function to decode JWT
function getCurrentUserId() {
  const token = localStorage.getItem('token');
  if (!token) return null;
  try {
    const decoded = JSON.parse(atob(token.split('.')[1]));
    return decoded.id;
  } catch (e) {
    console.error('Failed to decode token', e);
    return null;
  }
}

function Dashboard() {
  const navigate = useNavigate();
  const [posts, setPosts] = useState([]);
  // Store all comments for EACH post in a flat list, keyed by postId
  const [allCommentsByPostId, setAllCommentsByPostId] = useState({});
  const [newTopLevelComment, setNewTopLevelComment] = useState({}); // For top-level comments content
  const [showComments, setShowComments] = useState({}); // Toggles visibility of comment sections
  const [loading, setLoading] = useState(true);
  const token = localStorage.getItem('token');
  const userId = getCurrentUserId();

  const fetchPosts = useCallback(async () => {
    try {
      const res = await api.get('/posts');
      const enrichedPosts = res.data.map(post => ({
        ...post,
        isLiked: post.isLiked !== undefined ? post.isLiked : (post.likes?.some(like => like.userId === userId) || false),
        likeCount: post.likeCount !== undefined ? post.likeCount : (post.likes?.length || 0),
      }));
      setPosts(enrichedPosts);
      if (loading) setLoading(false);
    } catch (err) {
      if (err.response?.status === 401) navigate('/');
      if (loading) setLoading(false);
      console.error('Error fetching posts:', err);
    }
  }, [userId, navigate, loading]);


  const fetchCommentsForPost = async (postId) => {
    try {
      const res = await api.get(`/comments/${postId}/comments`);
      setAllCommentsByPostId(prev => ({
        ...prev,
        [postId]: res.data // Store the flat list of all comments for this post
      }));
    } catch (err) {
      console.error(`Failed to load comments for post ${postId}`, err);
    }
  };

  // Handles adding ANY new comment (top-level or reply) to the state
  const handleCommentAdded = (newCommentData, postId) => {
    setAllCommentsByPostId(prev => {
      const currentPostComments = prev[postId] || [];
      // Avoid adding duplicates if already present (e.g., from optimistic update elsewhere)
      if (currentPostComments.some(c => c._id === newCommentData._id)) {
        return prev;
      }
      return {
        ...prev,
        [postId]: [...currentPostComments, newCommentData]
      };
    });
  };

  const handleTopLevelCommentSubmit = async (e, postId) => {
    e.preventDefault();
    const content = newTopLevelComment[postId];
    if (!content || !content.trim() || !token) return;

    try {
      const res = await api.post(`/comments/${postId}/comments`, {
        content: content,
        parentId: null // Explicitly null for top-level comments
      });
      handleCommentAdded(res.data, postId); // Use the generic handler
      setNewTopLevelComment(prev => ({ ...prev, [postId]: '' })); // Clear input
    } catch (err) {
      console.error('Failed to add top-level comment', err);
      // Add user-facing error
    }
  };

  // Function to recursively find all descendant IDs of a comment
  const getAllDescendantIds = (allComments, parentId) => {
    let descendants = [];
    const children = allComments.filter(comment => comment.parentId === parentId);
    for (const child of children) {
      descendants.push(child._id);
      descendants = descendants.concat(getAllDescendantIds(allComments, child._id));
    }
    return descendants;
  };

  const handleDeleteComment = async (commentIdToDelete, postId) => {
    if (!window.confirm('Are you sure you want to delete this comment and all its replies?')) return;
    try {
      await api.delete(`/comments/${commentIdToDelete}`);
      // Client-side removal of the comment and all its descendants
      setAllCommentsByPostId(prev => {
        const postComments = prev[postId] || [];
        const descendantIds = getAllDescendantIds(postComments, commentIdToDelete);
        const idsToRemove = new Set([commentIdToDelete, ...descendantIds]);
        return {
          ...prev,
          [postId]: postComments.filter(comment => !idsToRemove.has(comment._id))
        };
      });
    } catch (err) {
      console.error('Failed to delete comment', err);
      // Optionally re-fetch comments on error for consistency
      fetchCommentsForPost(postId);
    }
  };

  const toggleCommentSection = (postId) => {
    if (!allCommentsByPostId[postId] && !showComments[postId]) { // If opening and not loaded
      fetchCommentsForPost(postId);
    }
    setShowComments(prev => ({ ...prev, [postId]: !prev[postId] }));
  };

  const deletePost = async (id) => {
    if (window.confirm('Are you sure you want to delete this post?')) {
      try {
        await api.delete(`/posts/${id}`);
        setPosts(prevPosts => prevPosts.filter(post => post._id !== id));
        // Also remove comments for this post from state
        setAllCommentsByPostId(prev => {
          const newState = { ...prev };
          delete newState[id];
          return newState;
        });
      } catch (err) {
        alert('Failed to delete post');
        console.error('Error deleting post:', err);
      }
    }
  };

  useEffect(() => {
    fetchPosts();
    const intervalId = setInterval(fetchPosts, 500); // Poll for new posts less frequently
    return () => clearInterval(intervalId);
  }, [fetchPosts]);

  return (
    <div className="flex-grow bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white p-4 md:p-6 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <div className="mb-10"><Profile /></div>

        <div className="flex flex-col md:flex-row md:items-center justify-between gap-6 mb-10">
          <div className="relative z-10">
            <div className="absolute -top-6 -left-6 w-32 h-32 bg-purple-600/10 rounded-full blur-3xl"></div>
            <h2 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent drop-shadow-lg">
              Community Feed
            </h2>
            <p className="text-gray-400 mt-2 max-w-xl">
              Explore the latest posts from our vibrant community
            </p>
          </div>

          {token && (
            <button
              onClick={() => navigate('/create-post')}
              className="group relative flex items-center gap-2 px-5 py-3 bg-gradient-to-r from-gray-800 to-gray-900 border border-gray-700 rounded-xl hover:border-purple-500 transition-all duration-300 hover:shadow-lg hover:shadow-purple-900/20"
            >
              <svg width={24} height={24} viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="fill-current text-purple-400 group-hover:text-white" > <g clipPath="url(#clip0_906_8052)"> <path d="M13.1875 9.28125H10.6875V6.8125C10.6875 6.4375 10.375 6.125 9.96875 6.125C9.59375 6.125 9.28125 6.4375 9.28125 6.84375V9.3125H6.8125C6.4375 9.3125 6.125 9.625 6.125 10.0312C6.125 10.4062 6.4375 10.7187 6.84375 10.7187H9.3125V13.1875C9.3125 13.5625 9.625 13.875 10.0312 13.875C10.4062 13.875 10.7187 13.5625 10.7187 13.1562V10.6875H13.1875C13.5625 10.6875 13.875 10.375 13.875 9.96875C13.875 9.59375 13.5625 9.28125 13.1875 9.28125Z" /> <path d="M10 0.5625C4.78125 0.5625 0.5625 4.78125 0.5625 10C0.5625 15.2188 4.8125 19.4688 10.0312 19.4688C15.25 19.4688 19.5 15.2188 19.5 10C19.4688 4.78125 15.2188 0.5625 10 0.5625ZM10 18.0625C5.5625 18.0625 1.96875 14.4375 1.96875 10C1.96875 5.5625 5.5625 1.96875 10 1.96875C14.4375 1.96875 18.0625 5.5625 18.0625 10C18.0625 14.4375 14.4375 18.0625 10 18.0625Z" /> </g> <defs> <clipPath id="clip0_906_8052)"> <rect width={20} height={20} fill="white" /> </clipPath> </defs> </svg>
              <span className="font-medium">Create New Post</span>
              <div className="absolute -bottom-1 left-1/2 w-0 h-0.5 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full transition-all duration-300 group-hover:left-0 group-hover:w-full"></div>
            </button>
          )}
        </div>

        {loading ? (
          <div className="flex flex-col items-center justify-center py-20"> <div className="relative"> <div className="absolute -inset-4 bg-gradient-to-r from-purple-600/20 to-cyan-500/20 rounded-full blur-xl animate-pulse"></div> <div className="relative animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-transparent border-t-purple-500 border-b-cyan-400"></div> </div> <span className="mt-6 text-lg text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-cyan-400 font-medium"> Loading community posts... </span> </div>
        ) : posts.length === 0 ? (
          <div className="flex flex-col items-center justify-center py-20 md:py-28 bg-gradient-to-br from-gray-800/20 to-gray-900/40 border border-gray-700/30 rounded-3xl backdrop-blur-sm relative overflow-hidden"> <div className="absolute -top-1/4 -left-1/4 w-full h-full bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-purple-600/10 via-transparent to-transparent"></div> <div className="mb-6 p-5 bg-gradient-to-br from-gray-800/50 to-gray-900/50 border border-gray-700/30 rounded-full backdrop-blur-sm shadow-lg"> <div className="bg-gray-900 p-4 rounded-full"> <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /> </svg> </div> </div> <h3 className="text-2xl font-bold text-gray-200 mb-3">No Posts Found</h3> <p className="text-gray-500 max-w-md text-center mb-6"> Be the first to create a post and start the conversation! </p> <button onClick={() => navigate('/create-post')} className="px-6 py-3 bg-gradient-to-r from-purple-700/50 to-indigo-700/50 border border-purple-500/30 rounded-lg text-purple-300 hover:text-white hover:from-purple-700/70 hover:to-indigo-700/70 transition-all duration-300 backdrop-blur-sm flex items-center gap-2 shadow-md hover:shadow-purple-900/30" > <svg width={20} height={20} viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" className="fill-current text-purple-400" > <g clipPath="url(#clip0_906_8052)"> <path d="M13.1875 9.28125H10.6875V6.8125C10.6875 6.4375 10.375 6.125 9.96875 6.125C9.59375 6.125 9.28125 6.4375 9.28125 6.84375V9.3125H6.8125C6.4375 9.3125 6.125 9.625 6.125 10.0312C6.125 10.4062 6.4375 10.7187 6.84375 10.7187H9.3125V13.1875C9.3125 13.5625 9.625 13.875 10.0312 13.875C10.4062 13.875 10.7187 13.5625 10.7187 13.1562V10.6875H13.1875C13.5625 10.6875 13.875 10.375 13.875 9.96875C13.875 9.59375 13.5625 9.28125 13.1875 9.28125Z" /> <path d="M10 0.5625C4.78125 0.5625 0.5625 4.78125 0.5625 10C0.5625 15.2188 4.8125 19.4688 10.0312 19.4688C15.25 19.4688 19.5 15.2188 19.5 10C19.4688 4.78125 15.2188 0.5625 10 0.5625ZM10 18.0625C5.5625 18.0625 1.96875 14.4375 1.96875 10C1.96875 5.5625 5.5625 1.96875 10 1.96875C14.4375 1.96875 18.0625 5.5625 18.0625 10C18.0625 14.4375 14.4375 18.0625 10 18.0625Z" /> </g> <defs> <clipPath id="clip0_906_8052_alt"> <rect width={20} height={20} fill="white" /> </clipPath> </defs> </svg> Create Your First Post </button> </div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {posts.map((post) => {
              const currentPostCommentsFlat = allCommentsByPostId[post._id] || [];
              // Filter top-level comments (those without a parentId or with a parentId not in the current list)
              const topLevelCommentsToDisplay = currentPostCommentsFlat
                .filter(comment => !comment.parentId || !currentPostCommentsFlat.find(c => c._id === comment.parentId))
                .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));

              return (
                <div
                  key={post._id}
                  className="group relative bg-gradient-to-b from-gray-800/40 to-gray-900/60 border border-gray-700/40 rounded-2xl shadow-xl overflow-hidden transition-all duration-300 hover:border-purple-500/50 hover:shadow-purple-900/25 transform hover:-translate-y-1"
                >
                  <div className="absolute inset-0 -z-10"> <div className="absolute top-0 left-0 w-32 h-32 bg-purple-600/5 rounded-full blur-2xl -translate-x-1/2 -translate-y-1/2"></div> <div className="absolute bottom-0 right-0 w-40 h-40 bg-cyan-500/5 rounded-full blur-2xl translate-x-1/2 translate-y-1/2"></div> </div>
                  <div className="absolute inset-0 bg-gradient-to-br from-purple-900/15 to-blue-900/15 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-2xl"></div>

                  <div className="p-5 relative z-10">
                    {/* Post Header, Image, Content, LikeButton ... (Keep your existing structure) */}
                    <div className="flex items-start gap-4"> <div className="flex-shrink-0"> <div className="relative"> <div className="absolute -inset-1 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-full blur opacity-20 group-hover:opacity-30 transition-opacity"></div> <div className="w-12 h-12 rounded-full bg-gradient-to-br from-purple-600 to-blue-500 p-0.5"> <div className="bg-gray-900 rounded-full p-1"> <div className="bg-gray-800 rounded-full w-full h-full flex items-center justify-center"> <span className="text-sm font-bold bg-gradient-to-r from-purple-300 to-cyan-300 bg-clip-text text-transparent"> {post.author.username.charAt(0).toUpperCase()} </span> </div> </div> </div> </div> </div> <div className="flex-1 min-w-0"> <h3 className="text-lg font-bold group-hover:text-purple-300 transition-colors bg-gradient-to-r from-purple-100/90 to-cyan-100/90 bg-clip-text text-transparent"> {post.title} </h3> <p className="text-sm text-gray-400 mt-1"> By: <span className="text-purple-400">{post.author.username}</span> </p> <p className="text-xs text-gray-500 mt-1"> {new Date(post.createdAt).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric', hour: '2-digit', minute: '2-digit' })} </p> </div> </div>
                    <div className="mt-5"> {post.imageUrl && (<div className="mb-4 rounded-xl overflow-hidden border border-gray-700/50 group-hover:border-purple-500/30 transition-colors"> <img src={`${post.imageUrl.startsWith('/') ? 'http://localhost:5000' : ''}${post.imageUrl}`} alt={post.title} className="w-full h-48 object-cover group-hover:scale-[1.02] transition-transform duration-300" /> </div>)} <p className="text-gray-300 line-clamp-3">{post.content}</p> </div>
                    <div className="mt-5 flex items-center justify-between">
                      <LikeButton postId={post._id} initialIsLiked={post.isLiked} initialLikeCount={post.likeCount} />
                      <button onClick={() => toggleCommentSection(post._id)} className="flex items-center gap-1.5 text-sm text-gray-400 hover:text-purple-400 group"> <div className="relative"> <div className="absolute -inset-1.5 bg-purple-500/10 rounded-full opacity-0 group-hover:opacity-100 transition-opacity"></div> <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /> </svg> </div> <span>{showComments[post._id] ? 'Hide' : 'Show'} Comments ({currentPostCommentsFlat.length})</span> </button>
                      {token && post.author._id === userId && (<div className="flex gap-2"> <button onClick={() => navigate(`/edit-post/${post._id}`)} className="w-9 h-9 flex items-center justify-center rounded-lg bg-gradient-to-br from-gray-800/50 to-gray-900/60 border border-gray-700/50 hover:from-purple-700/80 hover:to-indigo-700/80 transition-all duration-300 backdrop-blur-sm group" aria-label="Edit post" title="Edit Post" > <svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 text-gray-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L6.832 19.82a4.5 4.5 0 01-1.897 1.13l-2.685.8.8-2.685a4.5 4.5 0 011.13-1.897L16.863 4.487zm0 0L19.5 7.125" /> </svg> </button> <button onClick={() => deletePost(post._id)} className="w-9 h-9 flex items-center justify-center rounded-lg bg-gradient-to-br from-gray-800/50 to-gray-900/60 border border-gray-700/50 hover:from-red-700/80 hover:to-red-700/80 transition-all duration-300 backdrop-blur-sm group" aria-label="Delete Post" title="Delete Post" > <svg xmlns="http://www.w3.org/2000/svg" className="w-4 h-4 text-gray-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" > <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 6h14M6 6v12a2 2 0 002 2h8a2 2 0 002-2V6M9 5V4a1 1 0 011-1h4a1 1 0 011 1v1" /> </svg> </button> </div>)}
                    </div>

                    {showComments[post._id] && (
                      <div className="mt-6 pt-5 border-t border-gray-700/50">
                        {token && (
                          <form onSubmit={(e) => handleTopLevelCommentSubmit(e, post._id)} className="mb-6 relative">
                            <textarea
                              value={newTopLevelComment[post._id] || ''}
                              onChange={(e) => setNewTopLevelComment(prev => ({ ...prev, [post._id]: e.target.value }))}
                              placeholder="Share your thoughts..."
                              className="w-full px-4 py-3 bg-gray-800/60 border border-gray-700/60 rounded-xl text-white placeholder-gray-400 focus:border-purple-500/70 focus:outline-none focus:ring-2 focus:ring-purple-900/40 backdrop-blur-sm transition-colors"
                              rows="2"
                            ></textarea>
                            <button type="submit" className="absolute bottom-3 right-3 px-3 py-1.5 text-sm font-medium rounded-lg bg-gray-700/60 border border-gray-600/70 rounded-lg text-gray-300 hover:text-purple-300 hover:border-purple-500/50 hover:bg-purple-900/30 transition-all duration-300">
                              Post
                            </button>
                          </form>
                        )}

                        <div className="max-h-[450px] overflow-y-auto pr-1 custom-scrollbar">
                          {topLevelCommentsToDisplay.length > 0 ? (
                            topLevelCommentsToDisplay.map((comment) => (
                              <Comment
                                key={comment._id}
                                comment={comment}
                                currentUserId={userId}
                                onDeleteComment={handleDeleteComment} // Pass directly
                                onCommentAdded={(newReplyData) => handleCommentAdded(newReplyData, post._id)}
                                allCommentsForPost={currentPostCommentsFlat} // Pass the full flat list for this post
                                level={0}
                              />
                            ))
                          ) : (
                            <div className="text-center py-4"> <div className="inline-block p-3 bg-gray-800/50 rounded-full mb-2"> <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /> </svg> </div> <p className="text-gray-500 text-sm">No comments yet. {token ? "Be the first to comment!" : "Log in to comment."}</p> </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                  <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-l from-purple-500/5 to-transparent rounded-bl-full opacity-70 group-hover:opacity-100"></div>
                  <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-r from-cyan-500/5 to-transparent rounded-tr-full opacity-70 group-hover:opacity-100"></div>
                </div>
              );
            })}
          </div>
        )}

        <div className="mt-12 pt-6 border-t border-gray-800/50 text-center"> <div className="inline-flex items-center gap-8"> <div className="flex flex-col items-center"> <span className="text-xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent"> {posts.length} </span> <span className="text-gray-500 text-sm mt-1">Total Posts</span> </div> </div> <p className="text-gray-600 text-xs mt-4"> Content refreshes periodically </p> </div>
      </div>
      <style jsx global>{`
        .custom-scrollbar::-webkit-scrollbar { width: 6px; }
        .custom-scrollbar::-webkit-scrollbar-track { background: rgba(31, 41, 55, 0.3); border-radius: 10px; } /* gray-800/30 */
        .custom-scrollbar::-webkit-scrollbar-thumb { background: rgba(107, 114, 128, 0.4); border-radius: 10px; } /* gray-500/40 */
        .custom-scrollbar::-webkit-scrollbar-thumb:hover { background: rgba(139, 92, 246, 0.5); } /* purple-500/50 */
      `}</style>
    </div>
  );
}

export default Dashboard;

////EditPost.jsx
import { useEffect, useState } from 'react';
import api from '../utils/api';
import { useNavigate, useParams } from 'react-router-dom';

function EditPost() {
  const navigate = useNavigate();
  const { id } = useParams();
  const token = localStorage.getItem('token');
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [image, setImage] = useState(null);
  const [preview, setPreview] = useState(null);
  const [currentImageUrl, setCurrentImageUrl] = useState('');
  const [error, setError] = useState('');

  useEffect(() => {
    const fetchPost = async () => {
      try {
        const res = await api.get(`/posts/${id}`);
        setTitle(res.data.title);
        setContent(res.data.content);
        setCurrentImageUrl(res.data.imageUrl);
      } catch (err) {
        setError('Failed to load post');
        console.error(err);
      }
    };

    if (token) {
      fetchPost();
    } else {
      navigate('/login');
    }
  }, [id, token, navigate]);

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(file);
      const reader = new FileReader();
      reader.onloadend = () => {
        setPreview(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const formData = new FormData();
      formData.append('title', title);
      formData.append('content', content);
      if (image) {
        formData.append('image', image);
      }
      await api.put(`/posts/${id}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        }
      });
      navigate('/dashboard');
    } catch (err) {
      setError(err.response?.data?.error || 'Something went wrong');
    }
  };

  return (
    <div className="flex-grow bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white p-4 md:p-8 min-h-screen">
      {/* Animated Background Elements */}
      <div className="fixed inset-0 overflow-hidden -z-10">
        {[...Array(12)].map((_, i) => (
          <div 
            key={i}
            className="absolute rounded-full animate-float"
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              width: `${Math.random() * 10 + 5}px`,
              height: `${Math.random() * 10 + 5}px`,
              background: `rgba(${i % 3 === 0 ? '139, 92, 246' : i % 3 === 1 ? '59, 130, 246' : '6, 182, 212'}, ${Math.random() * 0.2 + 0.05})`,
              animationDuration: `${Math.random() * 20 + 10}s`,
              animationDelay: `${Math.random() * 5}s`,
            }}
          ></div>
        ))}
      </div>

      <div className="max-w-3xl mx-auto mt-8 md:mt-16">
        <div className="relative bg-gray-900/70 backdrop-blur-lg border border-gray-700/50 rounded-3xl shadow-2xl shadow-purple-900/20 overflow-hidden transition-all duration-500 hover:shadow-purple-900/30">
          {/* Decorative Gradient Elements */}
          <div className="absolute top-0 left-0 w-1/3 h-full bg-gradient-to-r from-purple-900/15 via-purple-900/5 to-transparent"></div>
          <div className="absolute bottom-0 right-0 w-1/3 h-full bg-gradient-to-l from-blue-900/15 via-blue-900/5 to-transparent"></div>
          
          <div className="relative z-10 p-8 md:p-10">
            {/* Header Section */}
            <div className="mb-10 text-center group">
              <h2 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent inline-block">
                Refine Your Story
              </h2>
              <p className="text-gray-400/90 mt-3 text-lg max-w-md mx-auto">
                Perfect your message and share it with the world
              </p>
              <div className="mt-4 h-1 w-20 bg-gradient-to-r from-purple-600 to-blue-500 rounded-full mx-auto opacity-80 group-hover:w-32 transition-all duration-500"></div>
            </div>
            
            {error && (
              <div className="mb-8 p-4 bg-red-900/40 border border-red-700/50 rounded-xl text-red-300 text-center backdrop-blur-sm shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mx-auto mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                {error}
              </div>
            )}
            
            <form onSubmit={handleSubmit} className="space-y-8">
              {/* Title Field */}
              <div className="group">
                <label htmlFor="title" className="block text-sm font-medium text-gray-300/90 mb-3 ml-1">
                  <span className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">Post Title</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <input
                    id="title"
                    value={title}
                    onChange={(e) => setTitle(e.target.value)}
                    required
                    className="relative w-full px-5 py-4 bg-gray-800/70 border border-gray-700/50 rounded-xl text-white placeholder-gray-500/70 focus:border-purple-500/70 focus:outline-none focus:ring-2 focus:ring-purple-900/20 transition-all duration-300"
                    placeholder="Craft your perfect title..."
                  />
                </div>
              </div>
              
              {/* Content Field */}
              <div className="group">
                <label htmlFor="content" className="block text-sm font-medium text-gray-300/90 mb-3 ml-1">
                  <span className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">Your Content</span>
                </label>
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <textarea
                    id="content"
                    value={content}
                    onChange={(e) => setContent(e.target.value)}
                    required
                    rows={8}
                    className="relative w-full px-5 py-4 bg-gray-800/70 border border-gray-700/50 rounded-xl text-white placeholder-gray-500/70 focus:border-purple-500/70 focus:outline-none focus:ring-2 focus:ring-purple-900/20 transition-all duration-300"
                    placeholder="Refine your thoughts and ideas..."
                  ></textarea>
                </div>
              </div>
              
              {/* Image Upload */}
              <div className="group">
                <label htmlFor="image" className="block text-sm font-medium text-gray-300/90 mb-3 ml-1">
                  <span className="bg-gradient-to-r from-purple-400 to-blue-400 bg-clip-text text-transparent">Update Featured Image</span>
                </label>
                
                <div className="relative">
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-blue-600/20 rounded-xl blur-md opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <div className="relative flex flex-col items-center justify-center border-2 border-dashed border-gray-700/50 rounded-xl p-10 text-center bg-gray-900/30 hover:border-purple-500/50 transition-all duration-500 cursor-pointer overflow-hidden">
                    <div className="relative z-10">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-14 w-14 text-gray-500/80 mb-4 group-hover:text-purple-400 transition-colors duration-300 mx-auto" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                      </svg>
                      <p className="text-gray-400/90 group-hover:text-gray-300 transition-colors duration-300 text-lg">
                        {preview ? 'New image selected!' : 'Drag & drop or click to update'}
                      </p>
                      <p className="text-sm text-gray-500/70 mt-2">Supports: JPG, PNG, GIF (Max 10MB)</p>
                    </div>
                    <input
                      type="file"
                      id="image"
                      name="image"
                      accept="image/*"
                      onChange={handleImageChange}
                      className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
                    />
                  </div>
                </div>
                
                {(preview || currentImageUrl) && (
                  <div className="mt-6 border border-gray-700/50 rounded-xl overflow-hidden transition-all duration-500 group">
                    <div className="relative">
                      <img 
                        src={preview || `${currentImageUrl.startsWith('/') ? 'http://localhost:5000' : ''}${currentImageUrl}`}
                        alt="Preview" 
                        className="w-full h-80 object-cover group-hover:opacity-90 transition-opacity duration-300"
                      />
                      <button
                        type="button"
                        onClick={() => {
                          setPreview(null);
                          setImage(null);
                        }}
                        className="absolute top-4 right-4 bg-gray-900/80 hover:bg-red-600/90 rounded-full p-2 transition-all duration-300 shadow-lg"
                        title="Remove image"
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-red-400 hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                        </svg>
                      </button>
                    </div>
                    <div className="p-4 bg-gray-800/50 text-center text-sm text-gray-400/80 border-t border-gray-700/50">
                      {preview ? 'New image preview' : 'Current featured image'}
                    </div>
                  </div>
                )}
              </div>
              
              {/* Action Buttons */}
              <div className="flex gap-5 pt-6">
                <button
                  type="button"
                  onClick={() => navigate('/dashboard')}
                  className="flex-1 py-4 px-6 bg-gray-800/70 hover:bg-gray-700/90 border border-gray-700/50 rounded-xl text-gray-300 hover:text-red-400 font-medium flex items-center justify-center gap-3 transition-all duration-300 shadow-md hover:shadow-red-900/20 group"
                >
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-400 group-hover:text-red-400 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                  <span>Discard Changes</span>
                  <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-transparent via-red-500 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </button>
                
                <button
                  type="submit"
                  className="flex-1 py-4 px-6 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 rounded-xl text-white font-semibold transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-900/40 flex items-center justify-center gap-3 group relative overflow-hidden"
                >
                  <span className="relative z-10 flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                    </svg>
                    Update Post
                  </span>
                  <div className="absolute inset-0 bg-gradient-to-r from-purple-700/30 to-indigo-700/30 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gradient-to-r from-cyan-400 to-blue-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      {/* Animation Styles */}
      <style jsx global>{`
        @keyframes float {
          0% { transform: translateY(0) rotate(0deg); }
          50% { transform: translateY(-20px) rotate(5deg); }
          100% { transform: translateY(0) rotate(0deg); }
        }
        .animate-float {
          animation: float linear infinite;
        }
      `}</style>
    </div>
  );
}

export default EditPost;

////FollowListModal.jsx
// client/src/components/FollowListModal.jsx
import React, { useEffect, useState } from 'react';
import api from '../utils/api';
import UserListItem from './UserListItem';

const FollowListModal = ({ isOpen, onClose, userId, listType }) => { // listType: 'followers' or 'following'
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');

  useEffect(() => {
    if (!isOpen || !userId || !listType) {
        setUsers([]); // Reset users when not open or params missing
        return;
    }

    const fetchUsers = async () => {
      setLoading(true);
      setError('');
      try {
        const endpoint = listType === 'followers' ? `/follow/${userId}/followers` : `/follow/${userId}/following`;
        const res = await api.get(endpoint);
        setUsers(res.data);
      } catch (err) {
        console.error(`Error fetching ${listType}:`, err);
        setError(`Failed to load ${listType}.`);
      } finally {
        setLoading(false);
      }
    };

    fetchUsers();
  }, [isOpen, userId, listType]);

  if (!isOpen) {
    return null;
  }

  return (
    <div 
        className="fixed inset-0 bg-black/70 backdrop-blur-sm flex items-center justify-center z-[999] p-4"
        onClick={onClose} // Close on overlay click
    >
      <div 
        className="bg-gradient-to-br from-gray-800 via-gray-850 to-gray-900 border border-gray-700/70 rounded-xl shadow-2xl w-full max-w-md max-h-[80vh] flex flex-col overflow-hidden"
        onClick={(e) => e.stopPropagation()} // Prevent closing when clicking inside modal
      >
        <div className="flex items-center justify-between p-5 border-b border-gray-700/50">
          <h2 className="text-xl font-semibold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-cyan-400">
            {listType.charAt(0).toUpperCase() + listType.slice(1)}
          </h2>
          <button 
            onClick={onClose} 
            className="text-gray-400 hover:text-white transition-colors p-1 rounded-full hover:bg-gray-700"
            aria-label="Close modal"
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
        
        <div className="p-2 overflow-y-auto flex-grow custom-scrollbar-thin">
          {loading && (
            <div className="py-10 text-center text-gray-400">Loading users...</div>
          )}
          {error && (
            <div className="py-10 text-center text-red-400">{error}</div>
          )}
          {!loading && !error && users.length === 0 && (
            <div className="py-10 text-center text-gray-500">No users to display.</div>
          )}
          {!loading && !error && users.length > 0 && (
            <div className="space-y-1 p-2">
              {users.map(user => (
                <UserListItem key={user._id} user={user} onModalClose={onClose} />
              ))}
            </div>
          )}
        </div>
      </div>
      <style jsx global>{`
        .custom-scrollbar-thin::-webkit-scrollbar { width: 5px; }
        .custom-scrollbar-thin::-webkit-scrollbar-track { background: rgba(31, 41, 55, 0.2); border-radius: 10px; }
        .custom-scrollbar-thin::-webkit-scrollbar-thumb { background: rgba(107, 114, 128, 0.3); border-radius: 10px; }
        .custom-scrollbar-thin::-webkit-scrollbar-thumb:hover { background: rgba(139, 92, 246, 0.4); }
      `}</style>
    </div>
  );
};

export default FollowListModal;

////Footer.jsx
import React from 'react';

function Footer() {
    return (
        <footer className="relative bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 shadow-2xl shadow-purple-900/30 pt-20 pb-12 border-t border-gray-700/50 overflow-hidden">
            {/* Animated Background Elements */}
            <div className="absolute inset-0">
                <div className="absolute top-0 left-0 w-1/3 h-full bg-gradient-to-r from-purple-900/10 via-purple-900/0 to-transparent animate-pulse"></div>
                <div className="absolute bottom-0 right-0 w-1/3 h-full bg-gradient-to-l from-blue-900/10 via-blue-900/0 to-transparent animate-pulse"></div>
                
                {/* Floating Particles with Animation */}
                {[...Array(15)].map((_, i) => (
                    <div 
                        key={i}
                        className="absolute rounded-full animate-float"
                        style={{
                            top: `${Math.random() * 100}%`,
                            left: `${Math.random() * 100}%`,
                            width: `${Math.random() * 8 + 2}px`,
                            height: `${Math.random() * 8 + 2}px`,
                            background: `rgba(${i % 3 === 0 ? '139, 92, 246' : i % 3 === 1 ? '59, 130, 246' : '6, 182, 212'}, ${Math.random() * 0.3 + 0.1})`,
                            animationDuration: `${Math.random() * 20 + 10}s`,
                            animationDelay: `${Math.random() * 5}s`,
                        }}
                    ></div>
                ))}
                
                {/* Subtle Grid Pattern */}
                <div className="absolute inset-0 opacity-5 bg-[size:30px_30px] bg-[linear-gradient(to_right,#80808012_1px,transparent_1px),linear-gradient(to_bottom,#80808012_1px,transparent_1px)]"></div>
            </div>
            
            <div className="container mx-auto px-6 relative z-10">
                <div className="flex flex-col lg:flex-row justify-between items-center lg:items-start gap-12">
                    {/* Brand Section - Enhanced */}
                    <div className="text-center lg:text-left max-w-md">
                        <div className="flex flex-col items-center lg:items-start">
                            <div className="flex items-center gap-3 mb-5 group cursor-pointer">
                                <div className="relative">
                                    <div className="absolute -inset-2 bg-gradient-to-r from-purple-600 to-blue-500 rounded-full blur opacity-20 group-hover:opacity-30 transition duration-500"></div>
                                    <img 
                                        src={"http://localhost:5000/images/Blog.svg"} 
                                        className="relative w-14 h-14 transition-transform duration-500 group-hover:rotate-6 group-hover:scale-110"
                                        alt="App Icon"
                                    />
                                </div>
                                <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent">
                                    Blog <span className="font-extrabold">App</span>
                                </h2>
                            </div>
                            
                            <p className="text-gray-400/90 mb-6 text-lg leading-relaxed">
                                A modern blogging platform where ideas meet innovation, built with passion by Saumy Tiwari
                            </p>
                            
                            {/* Social Links - Enhanced */}
                            <div className="flex gap-5">
                                {[
                                    { platform: 'github', icon: 'G', color: 'from-purple-600 to-indigo-600' },
                                    { platform: 'twitter', icon: 'T', color: 'from-sky-500 to-blue-600' },
                                    { platform: 'linkedin', icon: 'L', color: 'from-blue-500 to-cyan-600' }
                                ].map((item) => (
                                    <a 
                                        key={item.platform}
                                        href="#" 
                                        className={`relative w-12 h-12 flex items-center justify-center rounded-xl bg-gray-800/50 hover:bg-gradient-to-r ${item.color} transition-all duration-300 group border border-gray-700/50 hover:border-transparent shadow-md hover:shadow-lg`}
                                        aria-label={`Follow on ${item.platform}`}
                                    >
                                        <div className="absolute inset-0 rounded-xl bg-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                                        <span className="text-xl font-medium text-gray-400 group-hover:text-white transition-colors duration-300">
                                            {item.icon}
                                        </span>
                                        <div className="absolute -bottom-1 left-1/2 w-0 h-1 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full transition-all duration-300 group-hover:left-0 group-hover:w-full"></div>
                                    </a>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Creator Info - Enhanced */}
                    <div className="bg-gray-800/20 border border-gray-700/50 rounded-3xl p-8 backdrop-blur-lg shadow-2xl hover:shadow-purple-900/20 transition-all duration-500 group transform hover:-translate-y-1">
                        <div className="flex flex-col items-center">
                            <div className="relative mb-6">
                                <div className="w-20 h-20 rounded-full bg-gradient-to-r from-purple-600 to-blue-500 p-1 animate-gradient-border">
                                    <div className="bg-gray-900 rounded-full p-1.5">
                                        <div className="bg-gray-800/80 rounded-full w-full h-full flex items-center justify-center">
                                            <span className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">ST</span>
                                        </div>
                                    </div>
                                </div>
                                <div className="absolute bottom-2 right-2 w-4 h-4 bg-emerald-400 rounded-full border-2 border-gray-900 animate-pulse"></div>
                            </div>
                            <p className="text-gray-400/80 text-lg mb-1">Created with passion by</p>
                            <h3 className="text-2xl font-bold mt-1 bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent transition-all duration-500">
                                Saumy Tiwari
                            </h3>
                            <p className="text-sm text-gray-500 mt-3 flex items-center gap-1">
                                <span className="w-2 h-2 rounded-full bg-emerald-400 animate-pulse"></span>
                                Full Stack Developer
                            </p>
                            
                            <div className="mt-6 flex gap-4">
                                <button className="px-5 py-2 bg-gray-800/70 hover:bg-gray-700/90 border border-gray-700/50 rounded-xl text-gray-300 hover:text-white transition-all duration-300 text-sm font-medium flex items-center gap-2">
                                    <span>Contact</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                                    </svg>
                                </button>
                                <button className="px-5 py-2 bg-gradient-to-r from-purple-600/80 to-blue-500/80 hover:from-purple-600 hover:to-blue-500 border border-purple-500/30 rounded-xl text-white transition-all duration-300 text-sm font-medium flex items-center gap-2 shadow-md hover:shadow-purple-500/20">
                                    <span>Portfolio</span>
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                {/* Divider - Enhanced */}
                <div className="my-12 h-px bg-gradient-to-r from-transparent via-gray-700/50 to-transparent"></div>

                {/* Bottom Section - Enhanced */}
                <div className="flex flex-col md:flex-row justify-between items-center gap-4">
                    <div className="text-gray-500/80 text-sm">
                        &copy; {new Date().getFullYear()} Blog Verse.
                    </div>
                    
                    {/* Footer Links - Enhanced */}
                    <div className="flex gap-6">
                        {['Terms', 'Privacy', 'Cookies', 'Guidelines'].map((item) => (
                            <a 
                                key={item}
                                href="#" 
                                className="text-gray-500/80 hover:text-gray-300 text-sm transition-colors duration-300 relative group"
                            >
                                {item}
                                <span className="absolute -bottom-1 left-0 w-0 h-px bg-gradient-to-r from-purple-400 to-blue-400 transition-all duration-300 group-hover:w-full"></span>
                            </a>
                        ))}
                    </div>
                </div>
            </div>

            {/* Add this to your global CSS */}
            <style jsx global>{`
                @keyframes float {
                    0% { transform: translateY(0) rotate(0deg); }
                    50% { transform: translateY(-20px) rotate(5deg); }
                    100% { transform: translateY(0) rotate(0deg); }
                }
                .animate-float {
                    animation: float linear infinite;
                }
                .animate-gradient-border {
                    animation: gradient-border 3s ease infinite;
                    background-size: 200% 200%;
                }
                @keyframes gradient-border {
                    0% { background-position: 0% 50%; }
                    50% { background-position: 100% 50%; }
                    100% { background-position: 0% 50%; }
                }
            `}</style>
        </footer>
    );
}

export default Footer;

////LikeButton.jsx
import React, { useEffect } from 'react';
import api from '../utils/api';

function LikeButton({ postId, initialIsLiked = false, initialLikeCount = 0 }) {
    const [isLiked, setIsLiked] = React.useState(initialIsLiked);
    const [likeCount, setLikeCount] = React.useState(initialLikeCount);
    const [isLoading, setIsLoading] = React.useState(false);
    const [animate, setAnimate] = React.useState(false);

    const fetchPostData = async () => {
        try {
            const response = await api.get(`/posts/${postId}`);
            setIsLiked(response.data.isLiked);
            setLikeCount(response.data.likeCount);
        } catch (error) {
            console.error('Error fetching post data:', error);
        }
    };

    const toggleLike = async () => {
        if (isLoading) return;
        
        setIsLoading(true);
        setAnimate(true);

        try {
            const response = await api.post(`/posts/${postId}/like`);
            if (response.status === 200) {
                setIsLiked(!isLiked);
                setLikeCount(isLiked ? likeCount - 1 : likeCount + 1);
            }
        } catch (error) {
            console.error('Error toggling like:', error);
        } finally {
            setIsLoading(false);
            setTimeout(() => setAnimate(false), 500);
        }
    };

    useEffect(() => {
        fetchPostData();
        const interval = setInterval(fetchPostData, 500);
        return () => clearInterval(interval);
    }, []);

    return (
        <button
            onClick={toggleLike}
            disabled={isLoading}
            className={`relative flex items-center gap-2 px-4 py-2 rounded-full transition-all duration-300 group overflow-hidden ${
                isLiked 
                    ? 'text-white shadow-lg' 
                    : 'text-gray-400 hover:text-white'
            }`}
            aria-label={isLiked ? 'Unlike' : 'Like'}
            title={isLiked ? 'Dislike Post' : 'Like Post'}
        >
            {/* Animated background with gradient shine */}
            <div className={`absolute inset-0 z-0 transition-all duration-500 ${
                isLiked 
                    ? 'bg-gradient-to-br from-rose-500 via-pink-600 to-purple-600' 
                    : 'bg-gray-800/80 group-hover:bg-gray-700/90'
            }`}>
                {isLiked && (
                    <div className="absolute inset-0 bg-gradient-to-r from-white/10 via-white/0 to-white/10 animate-[shine_2s_infinite]"></div>
                )}
            </div>
            
            {/* Animated pulse effect */}
            {animate && (
                <div className={`absolute inset-0 z-0 rounded-full ${
                    isLiked 
                        ? 'animate-ping bg-gradient-to-br from-rose-500 to-pink-600' 
                        : 'animate-ping bg-gray-600'
                }`}></div>
            )}
            
            {/* Floating hearts effect when liked */}
            {isLiked && animate && (
                <div className="absolute inset-0 z-[1] overflow-hidden pointer-events-none">
                    {[...Array(12)].map((_, i) => (
                        <div 
                            key={i}
                            className="absolute animate-[floatUp_1.2s_ease-in-out_forwards]"
                            style={{
                                top: '80%',
                                left: `${Math.random() * 100}%`,
                                width: `${Math.random() * 16 + 8}px`,
                                height: `${Math.random() * 16 + 8}px`,
                                background: `radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(239,68,68,0.8) 50%, rgba(236,72,153,0.8) 100%)`,
                                opacity: 0,
                                borderRadius: '50%',
                                transform: `translate(${(Math.random() - 0.5) * 40}px, 0) rotate(${Math.random() * 360}deg)`,
                                animationDelay: `${i * 0.1}s`,
                                filter: 'blur(1px)',
                            }}
                        ></div>
                    ))}
                </div>
            )}
            
            {/* Icon container with bounce animation */}
            <div className="relative z-10 flex items-center justify-center">
                <svg
                    className={`w-6 h-6 transition-all duration-300 ${animate && isLiked ? 'animate-[bounce_0.6s_ease-in-out]' : ''}`}
                    fill={isLiked ? "url(#like-gradient)" : "none"}
                    stroke={isLiked ? "none" : "currentColor"}
                    strokeWidth={isLiked ? 0 : 1.5}
                    viewBox="0 0 24 24"
                    xmlns="http://www.w3.org/2000/svg"
                >
                    {isLiked && (
                        <defs>
                            <linearGradient id="like-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" stopColor="#FFEEEE" />
                                <stop offset="50%" stopColor="#F43F5E" />
                                <stop offset="100%" stopColor="#EC4899" />
                            </linearGradient>
                        </defs>
                    )}
                    <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"
                    />
                </svg>
            </div>
            
            {/* Counter with animation */}
            <span className={`relative z-10 font-medium text-sm transition-all duration-300 ${
                animate ? 'scale-125' : 'scale-100'
            } ${
                isLiked ? 'text-white/90' : 'text-gray-300 group-hover:text-white'
            }`}>
                {likeCount}
            </span>
            
            {/* Glow effect */}
            <div className={`absolute -inset-1 rounded-full opacity-0 group-hover:opacity-40 transition-opacity duration-300 blur-md ${
                isLiked ? 'bg-pink-500' : 'bg-gray-400'
            }`}></div>
            
            {/* Border highlight */}
            <div className={`absolute inset-0 rounded-full pointer-events-none border ${
                isLiked ? 'border-pink-300/30' : 'border-gray-600/30 group-hover:border-gray-400/50'
            }`}></div>
        </button>
    );
}

export default LikeButton;

////Message.jsx
// client/src/components/Message.jsx
import { useState } from 'react';
import { useSocket } from '../context/SocketContext';

const EDIT_DELETE_WINDOW_MS = 15 * 60 * 1000;

// Helper function to decode JWT from localStorage to get the current user's ID
function getCurrentUserId() {
  const token = localStorage.getItem('token');
  if (!token) return null;
  try {
    return JSON.parse(atob(token.split('.')[1])).id;
  } catch (e) {
    return null;
  }
}

function Message({ message }) {
  const currentUserId = getCurrentUserId();
  const { socket } = useSocket(); // Get the socket
  const [showOptions, setShowOptions] = useState(false); // State to show/hide options
  const [isEditing, setIsEditing] = useState(false);
  const [editedContent, setEditedContent] = useState(message.content);
  // Early exit if message or sender is not available
  if (!message || !message.sender) {
    return null;
  }
  const isFromMe = message.sender._id === currentUserId;

  // Check if the message is within the editable/deletable time window
  const isWithinTimeWindow = Date.now() - new Date(message.createdAt).getTime() < EDIT_DELETE_WINDOW_MS;
  
  const chatAlignment = isFromMe ? 'justify-end' : 'justify-start';
  const bubbleColor = isFromMe ? 'bg-gradient-to-br from-purple-600 to-blue-600' : 'bg-gray-700';
  const bubblePosition = isFromMe ? 'rounded-br-none' : 'rounded-bl-none';

  const handleDelete = () => {
    if (socket && window.confirm("Are you sure you want to delete this message?")) {
      socket.emit('deleteMessage', { messageId: message._id });
    }
  };

  const handleEditSubmit = (e) => {
    e.preventDefault();
    if (socket && editedContent.trim() !== message.content) {
      socket.emit('editMessage', { messageId: message._id, newContent: editedContent });
    }
    setIsEditing(false); // Close the edit form
  };

  return (
    <div className={`flex ${chatAlignment} w-full group`}>
      <div 
        className="flex items-end gap-2 max-w-lg"
        onMouseEnter={() => setShowOptions(true)}
        onMouseLeave={() => setShowOptions(false)}
      >
        {!isFromMe && (
          <img src={`http://localhost:5000${message.sender.avatar}`} alt="avatar" className="w-8 h-8 rounded-full self-start" />
        )}

        {/* Message Options (Edit and Delete Buttons) */}
        {isFromMe && !message.isDeleted && showOptions && !isEditing && isWithinTimeWindow && (
          <div className="flex items-center self-center transition-opacity duration-300">
            {/* EDIT BUTTON */}
            <button onClick={() => setIsEditing(true)} className="p-1.5 rounded-full hover:bg-gray-700 text-gray-400 hover:text-cyan-400">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536l12.232-12.232z" /></svg>
            </button>
            {/* DELETE BUTTON */}
            <button onClick={handleDelete} className="p-1.5 rounded-full hover:bg-red-900/50 text-gray-400 hover:text-red-400">
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
            </button>
          </div>
        )}

        <div className={`px-4 py-2.5 rounded-2xl text-white ${bubbleColor} ${bubblePosition} shadow-md w-full`}>
          {isEditing ? (
            <form onSubmit={handleEditSubmit}>
              <input
                type="text"
                value={editedContent}
                onChange={(e) => setEditedContent(e.target.value)}
                className="w-full bg-transparent border-b-2 border-blue-300/50 focus:border-blue-300 outline-none pb-1 text-base"
                autoFocus
              />
              <div className="text-xs mt-2">
                Press Enter to save, Esc to cancel.
                <button type="submit" className="font-bold ml-2 text-blue-300">Save</button>
                <button type="button" onClick={() => setIsEditing(false)} className="ml-2 text-gray-400">Cancel</button>
              </div>
            </form>
          ) : (
            <>
              <p className={`text-base ${message.isDeleted ? 'italic text-gray-300/80' : ''}`}>{message.content}</p>
              <div className="flex justify-end items-center gap-2">
                {message.isEdited && !message.isDeleted && <span className="text-xs text-gray-400/80">Edited</span>}
                <p className={`text-xs mt-1 text-right ${isFromMe ? 'text-blue-200/80' : 'text-gray-400/80'}`}>
                  {new Date(message.createdAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </p>
              </div>
            </>
          )}
        </div>
      </div>
    </div>
  );
}

export default Message;

////MessageContainer.jsx
// client/src/components/MessageContainer.jsx
import { useEffect, useState, useRef } from 'react';
import api from '../utils/api';
import Message from './Message';
import MessageInput from './MessageInput';
import { useSocket } from '../context/SocketContext';

function MessageContainer({ selectedConversation }) {
  const [messages, setMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const { socket } = useSocket();
  const messagesEndRef = useRef(null); // Ref to auto-scroll to bottom

  // Function to scroll to the latest message
  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollTo({
        top: messagesEndRef.current.scrollHeight,
        behavior: "smooth"
      });
    }
  };
  
  // Effect to fetch message history when a conversation is selected
  useEffect(() => {
    const fetchMessages = async () => {
      if (!selectedConversation) return;
      setLoading(true);
      try {
        const res = await api.get(`/chat/conversations/${selectedConversation._id}/messages`);
        setMessages(res.data);
      } catch (error) {
        console.error("Failed to fetch messages", error);
        setMessages([]); // Clear messages on error
      } finally {
        setLoading(false);
      }
    };
    fetchMessages();
  }, [selectedConversation]);

  // Effect to listen for new messages from Socket.IO
  useEffect(() => {
    if (socket) {
      const handleNewMessage = (newMessage) => {
        // Only add the message if it belongs to the currently selected conversation
        if (selectedConversation && newMessage.conversationId === selectedConversation._id) {
          setMessages((prevMessages) => [...prevMessages, newMessage]);
        }
      };
      const handleMessageDeleted = ({ messageId, conversationId }) => {
        if (selectedConversation && conversationId === selectedConversation._id) {
          setMessages((prevMessages) =>
            prevMessages.map((msg) =>
              msg._id === messageId
                ? { ...msg, content: "This message was deleted.", isDeleted: true }
                : msg
            )
          );
        }
      };
      const handleMessageEdited = ({ messageId, conversationId, newContent }) => {
        if (selectedConversation && conversationId === selectedConversation._id) {
          setMessages((prevMessages) =>
            prevMessages.map((msg) =>
              msg._id === messageId
                ? { ...msg, content: newContent, isEdited: true }
                : msg
            )
          );
        }
      };

      socket.on('newMessage', handleNewMessage);
      socket.on('messageDeleted', handleMessageDeleted);
      socket.on('messageEdited', handleMessageEdited);

      return () => {
        socket.off('newMessage', handleNewMessage);
        socket.off('messageDeleted', handleMessageDeleted);
        socket.off('messageEdited', handleMessageEdited);
      };
    }
  }, [socket, selectedConversation]);

  // Effect to scroll to bottom whenever messages array changes
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  if (!selectedConversation) {
    return (
      <div className="w-2/3 flex items-center justify-center">
        <div className="text-center text-gray-500">
          <p className="text-2xl">Select a chat to start messaging</p>
        </div>
      </div>
    );
  }
  
  const otherUser = selectedConversation.participants[0];

  return (
    <div className="w-2/3 flex flex-col h-full">
      {/* Header */}
      <div className="flex items-center gap-4 p-4 border-b border-gray-700/50 bg-gray-900/30">
        <img src={`http://localhost:5000${otherUser.avatar}`} alt={otherUser.username} className="w-10 h-10 rounded-full object-cover" />
        <h3 className="font-bold text-lg text-white">{otherUser.username}</h3>
      </div>
      
      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4 custom-scrollbar">
        {loading ? (
          <div className="text-center text-gray-400">Loading messages...</div>
        ) : (
          messages.map((msg) => (
            <Message key={msg._id} message={msg} />
          ))
        )}
        <div ref={messagesEndRef} />
      </div>
      
      {/* Input */}
      <MessageInput selectedConversation={selectedConversation} />
    </div>
  );
}

export default MessageContainer;

////MessageInput.jsx
// client/src/components/MessageInput.jsx
import { useState } from 'react';
import { useSocket } from '../context/SocketContext';

function MessageInput({ selectedConversation }) {
  const [content, setContent] = useState('');
  const { socket } = useSocket();

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!content.trim() || !socket || !selectedConversation) return;

    const receiverId = selectedConversation.participants[0]._id;

    // Emit the 'sendMessage' event to the server
    socket.emit('sendMessage', {
      receiverId,
      content,
    });
    
    setContent(''); // Clear the input field
  };

  return (
    <div className="p-4 bg-gray-900/50 border-t border-gray-700/50">
      <form onSubmit={handleSubmit} className="flex items-center gap-3">
        <input
          type="text"
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="Type a message..."
          className="flex-1 px-4 py-2.5 bg-gray-800/60 border border-gray-700/60 rounded-xl text-white placeholder-gray-400 focus:border-purple-500/70 focus:outline-none focus:ring-1 focus:ring-purple-900/40 transition-all backdrop-blur-sm"
        />
        <button
          type="submit"
          className="px-5 py-2.5 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl text-white font-semibold transition-all duration-300 shadow-lg hover:shadow-xl hover:shadow-purple-900/40 disabled:opacity-50"
          disabled={!content.trim()}
        >
          Send
        </button>
      </form>
    </div>
  );
}

export default MessageInput;

////Navbar.jsx
import { useNavigate } from 'react-router-dom';

function Navbar({ isAuthenticated, logout }) { // Ensure logout is passed from App.jsx
  const navigate = useNavigate();
  // handleLogout function is now in App.jsx and passed as `logout` prop

  return (
    <nav className="bg-gradient-to-r from-gray-900 via-gray-800 to-gray-900 shadow-2xl shadow-purple-900/30 sticky top-0 z-50 backdrop-blur-md border-b border-gray-700/50">
      <div className="container mx-auto px-6 py-3">
        <div className="flex justify-between items-center">
          {/* ... (Logo remains the same) ... */}
          <div className="flex items-center gap-3 cursor-pointer group" onClick={() => navigate(isAuthenticated ? '/dashboard' : '/')} > <div className="relative"> <div className="absolute -inset-1 bg-gradient-to-r from-purple-600 to-blue-500 rounded-lg blur opacity-20 group-hover:opacity-30 transition duration-300"></div> <img src={"http://localhost:5000/images/Blog.svg"} className="relative w-12 h-12 transition-all duration-500 group-hover:rotate-6 group-hover:scale-110" alt="App Icon" /> </div> <div className="relative"> <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent"> Blog <span className="font-extrabold">App</span> </h1> <div className="absolute bottom-0 left-0 h-1 w-full bg-gradient-to-r from-purple-600 to-blue-500 rounded-full transform origin-left scale-x-0 group-hover:scale-x-100 transition-transform duration-500"></div> </div> </div>
          <div className="flex items-center space-x-2 md:space-x-3">
            {isAuthenticated && (
              <>
                {/* ... (Home, Community, Chat, Logout buttons) ... */}
                <button onClick={() => navigate('/dashboard')} className="relative group flex items-center gap-2 px-4 py-2 md:px-5 md:py-2.5 bg-gray-800/70 hover:bg-gray-700/80 border border-gray-700 rounded-xl hover:border-purple-500 transition-all duration-300 hover:shadow-purple-900/30 shadow-md"> <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-purple-500/10 to-blue-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 md:h-5 md:w-5 text-purple-400 group-hover:text-purple-300 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" /> </svg> <span className="font-medium text-xs md:text-sm bg-gradient-to-r from-purple-200 to-blue-200 bg-clip-text text-transparent">Home</span> <div className="absolute -bottom-1 left-1/2 w-0 h-0.5 bg-gradient-to-r from-purple-500 to-blue-500 rounded-full transition-all duration-300 group-hover:left-0 group-hover:w-full"></div> </button>
              </>
            )}
            <button onClick={() => navigate('/about')} className="relative group flex items-center gap-2 px-4 py-2 md:px-5 md:py-2.5 bg-gray-800/70 hover:bg-gray-700/80 border border-gray-700 rounded-xl hover:border-teal-500 transition-all duration-300 hover:shadow-teal-900/30 shadow-md">
              <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-teal-500/10 to-cyan-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 md:h-5 md-w-5 text-teal-400 group-hover:text-teal-300 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
              <span className="font-medium text-xs md:text-sm bg-gradient-to-r from-teal-200 to-cyan-200 bg-clip-text text-transparent">About</span>
              <div className="absolute -bottom-1 left-1/2 w-0 h-0.5 bg-gradient-to-r from-teal-500 to-cyan-500 rounded-full transition-all duration-300 group-hover:left-0 group-hover:w-full"></div>
            </button>
            {isAuthenticated && (
              <>
                <button onClick={() => navigate('/users')} className="relative group flex items-center gap-2 px-4 py-2 md:px-5 md:py-2.5 bg-gray-800/70 hover:bg-gray-700/80 border border-gray-700 rounded-xl hover:border-indigo-500 transition-all duration-300 hover:shadow-indigo-900/30 shadow-md"> <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-indigo-500/10 to-blue-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 md:h-5 md:w-5 text-indigo-400 group-hover:text-indigo-300 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" /> </svg> <span className="font-medium text-xs md:text-sm bg-gradient-to-r from-indigo-200 to-blue-200 bg-clip-text text-transparent">Community</span> <div className="absolute -bottom-1 left-1/2 w-0 h-0.5 bg-gradient-to-r from-indigo-500 to-blue-400 rounded-full transition-all duration-300 group-hover:left-0 group-hover:w-full"></div> </button>
                <button onClick={() => navigate('/chat')} className="relative group flex items-center gap-2 px-4 py-2 md:px-5 md:py-2.5 bg-gray-800/70 hover:bg-gray-700/80 border border-gray-700 rounded-xl hover:border-cyan-500 transition-all duration-300 hover:shadow-cyan-900/30 shadow-md">
                  <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-cyan-500/10 to-blue-400/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 md:h-5 md:w-5 text-cyan-400 group-hover:text-cyan-300 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" /></svg>
                  <span className="font-medium text-xs md:text-sm bg-gradient-to-r from-cyan-200 to-blue-200 bg-clip-text text-transparent">Chat</span>
                  <div className="absolute -bottom-1 left-1/2 w-0 h-0.5 bg-gradient-to-r from-cyan-500 to-blue-400 rounded-full transition-all duration-300 group-hover:left-0 group-hover:w-full"></div>
                </button>
                <button onClick={logout} className="relative group flex items-center gap-2 px-4 py-2 md:px-5 md:py-2.5 bg-gray-800/70 hover:bg-gray-700/80 border border-gray-700 rounded-xl hover:border-red-500 transition-all duration-300 hover:shadow-red-900/30 shadow-md"> <div className="absolute inset-0 rounded-xl bg-gradient-to-r from-red-500/10 to-orange-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 md:h-5 md:w-5 text-red-400 group-hover:text-red-300 transition-colors" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" /> </svg> <span className="font-medium text-xs md:text-sm bg-gradient-to-r from-red-200 to-orange-200 bg-clip-text text-transparent">Logout</span> <div className="absolute -bottom-1 left-1/2 w-0 h-0.5 bg-gradient-to-r from-red-500 to-orange-500 rounded-full transition-all duration-300 group-hover:left-0 group-hover:w-full"></div> </button>
              </>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

////Profile.jsx
// client/src/components/Profile.jsx
import { useState, useEffect, useCallback } from 'react';
import api from '../utils/api';
import { useNavigate } from 'react-router-dom';
import FollowListModal from './FollowListModal';

export default function Profile() {
  const navigate = useNavigate();
  const [user, setUser] = useState(null);
  const [editing, setEditing] = useState(false);
  const [loading, setLoading] = useState(true); // Added loading state
  const [modalOpen, setModalOpen] = useState(false);
  const [modalListType, setModalListType] = useState('');

  const openFollowModal = (type) => {
    setModalListType(type);
    setModalOpen(true);
  };
  
  const fetchProfile = useCallback(async () => {
    setLoading(true);
    try {
      const res = await api.get('/users/me');
      setUser(res.data);
    } catch (err) {
      console.error("Error fetching profile:", err);
      if (err.response?.status === 401 || err.response?.status === 403) {
        localStorage.removeItem('token');
        navigate('/login');
      }
    } finally {
      setLoading(false);
    }
  }, [navigate]);

  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setUser(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!user) return;
    try {
      // Prepare user data, don't send follower/following arrays for update
      const { followers, following, followerCount, followingCount, ...userDataToUpdate } = user;
      await api.put('/users/me', userDataToUpdate);
      setEditing(false);
      fetchProfile(); 
    } catch (err) {
      console.error("Error updating profile:", err);
    }
  };

  const deleteUserAccount = async () => {
    if (window.confirm('Are you sure you want to delete your account? This action cannot be undone.')) {
      try {
        await api.delete('/users/me');
        localStorage.removeItem('token');
        navigate('/login');
      } catch (err) {
        alert('Failed to delete account');
      }
    }
  };

  const getAvatarSrc = (currentUser) => {
    if (!currentUser) return "http://localhost:5000/images/default_profile.jpg";
    const defaultAvatar = "http://localhost:5000/images/default_profile.jpg";
    if (currentUser.avatar && currentUser.avatar.startsWith('http')) return currentUser.avatar;
    if (currentUser.avatar && currentUser.avatar.startsWith('/images/')) return `http://localhost:5000${currentUser.avatar}`;
    return defaultAvatar;
  };

  if (loading) {
    return (
      <div className="relative bg-gradient-to-br from-gray-800/50 to-gray-900/80 border border-gray-700 rounded-2xl shadow-xl p-6 md:p-8 overflow-hidden backdrop-blur-sm min-h-[300px] flex items-center justify-center">
        <div className="animate-pulse text-purple-400">Loading Profile...</div>
      </div>
    );
  }

  if (!user) {
    return (
         <div className="relative bg-gradient-to-br from-gray-800/50 to-gray-900/80 border border-gray-700 rounded-2xl shadow-xl p-6 md:p-8 overflow-hidden backdrop-blur-sm min-h-[300px] flex items-center justify-center">
            <p className="text-red-400">Could not load profile. You might need to log in again.</p>
         </div>
    );
  }

  return (
    <div className="relative bg-gradient-to-br from-gray-800/50 to-gray-900/80 border border-gray-700/50 rounded-2xl shadow-xl p-6 md:p-8 overflow-hidden backdrop-blur-sm">
      <div className="absolute inset-0 -z-10"> <div className="absolute -top-[100px] -left-[100px] w-[300px] h-[300px] bg-gradient-to-r from-purple-600/10 to-cyan-500/10 rounded-full blur-[100px] animate-pulse-slow"></div> <div className="absolute -bottom-[100px] -right-[100px] w-[300px] h-[300px] bg-gradient-to-r from-blue-600/10 to-purple-500/10 rounded-full blur-[100px] animate-pulse-slow"></div> </div>
      <div className="absolute top-0 right-0 w-24 h-24 bg-gradient-to-l from-purple-500/15 to-transparent rounded-bl-full opacity-70"></div>
      <div className="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-r from-blue-500/15 to-transparent rounded-tr-full opacity-70"></div>
      
      <div className="relative z-10">
        <div className="flex flex-col md:flex-row items-center md:items-start gap-6 md:gap-8">
          <div className="relative flex-shrink-0">
            <div className="w-32 h-32 md:w-40 md:h-40 rounded-full bg-gradient-to-br from-purple-600 via-indigo-600 to-blue-500 p-1 shadow-2xl group">
              <div className="absolute inset-0 rounded-full bg-gradient-to-br from-purple-500/20 to-cyan-500/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              <div className="absolute inset-0 rounded-full border-2 border-transparent group-hover:border-white/20 transition-all duration-500"></div>
              <img  src={getAvatarSrc(user)} className="w-full h-full rounded-full object-cover border-2 border-gray-900 group-hover:border-purple-500/50 transition-all duration-500" alt="Avatar" />
            </div>
          </div>
          
          <div className="flex-1 w-full text-center md:text-left">
            {!editing ? (
              <div>
                <div className="mb-2">
                  <div className="inline-flex items-center gap-2 px-4 py-1.5 bg-gradient-to-r from-purple-900/50 to-indigo-900/50 border border-purple-700/30 rounded-full text-xs mb-4 shadow-lg backdrop-blur-sm"> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" /> </svg> <span className="text-purple-200 font-medium tracking-wider">YOUR PROFILE</span> </div>
                  <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent drop-shadow-lg"> {user.username} </h1>
                </div>
                
                <div className="mt-4 p-4 md:p-5 bg-gradient-to-br from-gray-800/40 to-gray-900/60 border border-gray-700/40 rounded-2xl backdrop-blur-sm">
                  <p className="text-gray-300 text-base md:text-lg leading-relaxed italic"> {user.bio || 'No bio yet. Click "Edit Profile" to add one!'} </p>
                </div>
                
                {/* Follower/Following Counts for own profile */}
                <div className="mt-6 flex flex-wrap justify-center md:justify-start gap-4 text-sm">
                    <div 
                        className="flex flex-col items-center p-3 bg-gray-900/60 rounded-xl backdrop-blur-sm border border-gray-700/50 min-w-[100px] cursor-pointer hover:border-purple-500/70 transition-colors"
                        onClick={() => openFollowModal('followers')}
                        title="View Your Followers"
                    >
                        <span className="text-xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">
                            {user.followerCount !== undefined ? user.followerCount : '0'}
                        </span>
                        <span className="text-gray-400 mt-1 tracking-wider text-xs">FOLLOWERS</span>
                    </div>
                    <div 
                        className="flex flex-col items-center p-3 bg-gray-900/60 rounded-xl backdrop-blur-sm border border-gray-700/50 min-w-[100px] cursor-pointer hover:border-purple-500/70 transition-colors"
                        onClick={() => openFollowModal('following')}
                        title="View Who You Follow"
                    >
                        <span className="text-xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">
                            {user.followingCount !== undefined ? user.followingCount : '0'}
                        </span>
                        <span className="text-gray-400 mt-1 tracking-wider text-xs">FOLLOWING</span>
                    </div>
                </div>

                <div className="flex flex-wrap gap-3 md:gap-4 mt-8 justify-center md:justify-start">
                  <button onClick={() => setEditing(true)} className="group relative flex items-center gap-3 px-5 py-2.5 bg-gradient-to-r from-gray-800/60 to-gray-900/70 border border-gray-700/60 rounded-xl hover:border-purple-500/70 transition-all duration-300 backdrop-blur-sm hover:shadow-lg hover:shadow-purple-900/30" > <div className="absolute inset-0 bg-gradient-to-r from-purple-900/20 to-blue-900/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl"></div> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-purple-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" /> </svg> <span className="font-medium text-xs text-gray-200 group-hover:text-white">Edit Profile</span> </button>
                  <button onClick={deleteUserAccount} className="group relative flex items-center gap-3 px-5 py-2.5 bg-gradient-to-r from-gray-800/60 to-gray-900/70 border border-gray-700/60 rounded-xl hover:border-red-500/70 transition-all duration-300 backdrop-blur-sm hover:shadow-lg hover:shadow-red-900/30" > <div className="absolute inset-0 bg-gradient-to-r from-red-900/20 to-red-800/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl"></div> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /> </svg> <span className="font-medium text-xs text-gray-200 group-hover:text-white">Delete Account</span> </button>
                </div>
              </div>
            ) : (
              <form onSubmit={handleSubmit} className="space-y-5 md:space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-5">
                  <div className="relative"> <label htmlFor="avatar" className="block text-xs font-medium text-gray-300 mb-1.5"> Avatar URL </label> <div className="relative"> <input type="text" id="avatar" name="avatar" value={user.avatar || ''} onChange={handleChange} className="w-full px-3 py-2.5 bg-gray-800/60 border border-gray-700/60 rounded-xl text-white placeholder-gray-400/70 focus:border-purple-500/70 focus:outline-none focus:ring-1 focus:ring-purple-900/40 transition-all backdrop-blur-sm text-sm" placeholder="Paste image URL" /> <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400/70"> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" /> </svg> </div> </div> </div>
                  <div> <label htmlFor="username" className="block text-xs font-medium text-gray-300 mb-1.5"> Username </label> <div className="relative"> <input type="text" name="username" value={user.username || ''} onChange={handleChange} className="w-full px-3 py-2.5 bg-gray-800/60 border border-gray-700/60 rounded-xl text-white placeholder-gray-400/70 focus:border-purple-500/70 focus:outline-none focus:ring-1 focus:ring-purple-900/40 transition-all backdrop-blur-sm text-sm" placeholder="Enter username" /> <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400/70"> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" /> </svg> </div> </div> </div>
                </div>
                <div> <label htmlFor="bio" className="block text-xs font-medium text-gray-300 mb-1.5"> Bio </label> <div className="relative"> <textarea name="bio" value={user.bio || ''} onChange={handleChange} className="w-full px-3 py-2.5 bg-gray-800/60 border border-gray-700/60 rounded-xl text-white placeholder-gray-400/70 focus:border-purple-500/70 focus:outline-none focus:ring-1 focus:ring-purple-900/40 transition-all backdrop-blur-sm text-sm" placeholder="Tell us about yourself..." rows="3" /> <div className="absolute right-3 top-3 text-gray-400/70"> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z" /> </svg> </div> </div> </div>
                <div className="flex gap-3 md:gap-4 pt-1 md:pt-2"> <button type="submit" className="group relative flex items-center gap-2 px-5 py-2.5 bg-gradient-to-r from-purple-600 to-indigo-600 rounded-xl text-white font-medium text-sm hover:from-purple-700 hover:to-indigo-700 transition-all duration-300 shadow-lg hover:shadow-purple-900/30 backdrop-blur-sm" > <div className="absolute inset-0 bg-gradient-to-r from-purple-500/20 to-indigo-500/20 opacity-0 group-hover:opacity-100 transition-opacity rounded-xl"></div> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" /> </svg> <span className="relative">Save Changes</span> </button> <button onClick={() => setEditing(false)} className="group relative flex items-center gap-2 px-5 py-2.5 bg-gradient-to-r from-gray-800/60 to-gray-900/70 border border-gray-700/60 rounded-xl hover:border-red-500/70 transition-all duration-300 backdrop-blur-sm hover:shadow-lg hover:shadow-red-900/20" > <div className="absolute inset-0 bg-gradient-to-r from-red-900/20 to-red-800/20 opacity-0 group-hover:opacity-100 transition-opacity rounded-xl"></div> <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-400 group-hover:text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" /> </svg> <span className="text-gray-200 group-hover:text-white text-sm">Cancel</span> </button> </div>
              </form>
            )}
          </div>
        </div>
        
        {/* Placeholder for more stats or activity - Keep your existing stats if you have them */}
        {!editing && user.posts && ( // Assuming user.posts is fetched, otherwise remove this or adapt
          <div className="mt-8 md:mt-10 pt-5 md:pt-6 border-t border-gray-700/40">
            <h3 className="text-lg font-semibold text-gray-300 mb-4 text-center md:text-left">Activity Overview</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-4">
              <div className="p-3 bg-gradient-to-br from-gray-800/40 to-gray-900/60 border border-gray-700/40 rounded-xl backdrop-blur-sm text-center"> <div className="text-lg font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">{user.posts?.length || 0}</div> <div className="text-gray-400 text-xs mt-1">Posts Created</div> </div>
              {/* Add more stats like total comments made, likes received etc. if you track them */}
            </div>
          </div>
        )}
      </div>
      {modalOpen && user && (
        <FollowListModal
          isOpen={modalOpen}
          onClose={() => setModalOpen(false)}
          userId={user._id} // Use logged-in user's ID
          listType={modalListType}
        />
      )}
      <style jsx>{` @keyframes pulse-slow { 0%, 100% { opacity: 0.1; } 50% { opacity: 0.2; } } .animate-pulse-slow { animation: pulse-slow 4s cubic-bezier(0.4, 0, 0.6, 1) infinite; } `}</style>
    </div>
  );
}

////UserList.jsx
import React, { useEffect, useState } from 'react';
import api from '../utils/api';
import { useNavigate } from 'react-router-dom';

function UserList() {
    const [users, setUsers] = useState([]);
    const navigate = useNavigate();

    const fetchUsers = async () => {
        try {
            const response = await api.get('/users');
            setUsers(response.data);
        } catch (error) {
            console.error('Error fetching users:', error);
        }
    }

    useEffect(() => {
        fetchUsers();
        const interval = setInterval(fetchUsers, 500);
        return () => clearInterval(interval);
    }, []);

    return (
        <div className="flex-grow bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white p-4 md:p-6">
            <div className="max-w-6xl mx-auto">
                {/* Enhanced Header Section */}
                <div className="flex flex-col md:flex-row md:items-center justify-between gap-6 mb-10 md:mb-12 relative">
                    <div className="relative z-10">
                        <div className="absolute -top-6 -left-6 w-24 h-24 bg-purple-600/10 blur-3xl rounded-full"></div>
                        <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent drop-shadow-xl">
                            Community Members
                        </h1>
                        <p className="text-gray-400 mt-2 max-w-md">
                            Discover and connect with other users in our vibrant community
                        </p>
                    </div>
                    
                    <div className="flex items-center gap-4">
                        <div className="relative">
                            <div className="absolute -inset-1 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-lg blur opacity-30 group-hover:opacity-50 transition-opacity"></div>
                            <div className="relative bg-gray-800/50 border border-gray-700/50 rounded-xl px-5 py-3 backdrop-blur-sm shadow-lg">
                                <span className="text-purple-400 font-medium text-lg">{users.length}</span> 
                                <span className="text-gray-400 ml-1"> {users.length === 1 ? 'user' : 'users'}</span>
                            </div>
                        </div>
                        
                        <div className="bg-gradient-to-r from-purple-600/20 to-cyan-500/20 border border-purple-500/30 rounded-xl p-1 backdrop-blur-sm">
                            <div className="flex -space-x-2">
                                {users.slice(0, 4).map((user, index) => (
                                    <img 
                                        key={index}
                                        src={"http://localhost:5000/images/default_profile.jpg"} 
                                        className="w-8 h-8 rounded-full border-2 border-gray-800 shadow-md"
                                        alt={user.username}
                                    />
                                ))}
                                {users.length > 4 && (
                                    <div className="w-8 h-8 rounded-full bg-gray-800/80 border-2 border-gray-800 flex items-center justify-center text-xs font-bold text-purple-400">
                                        +{users.length - 4}
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>
                </div>

                {/* Enhanced User Cards Grid */}
                {users.length === 0 ? (
                    <div className="flex flex-col items-center justify-center py-20 md:py-28 bg-gradient-to-br from-gray-800/20 to-gray-900/40 border border-gray-700/30 rounded-3xl backdrop-blur-sm relative overflow-hidden">
                        <div className="absolute -top-1/4 -left-1/4 w-full h-full bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-purple-600/10 via-transparent to-transparent"></div>
                        <div className="mb-6 p-5 bg-gradient-to-br from-gray-800/50 to-gray-900/50 border border-gray-700/30 rounded-full backdrop-blur-sm shadow-lg">
                            <div className="bg-gray-900 p-4 rounded-full">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                                </svg>
                            </div>
                        </div>
                        <h3 className="text-2xl font-bold text-gray-200 mb-3">No Users Found</h3>
                        <p className="text-gray-500 max-w-md text-center mb-6">
                            It seems no users are currently available. Try again later.
                        </p>
                        <button 
                            onClick={fetchUsers}
                            className="px-5 py-2.5 bg-gradient-to-r from-purple-700/50 to-indigo-700/50 border border-purple-500/30 rounded-lg text-purple-300 hover:text-white hover:from-purple-700/70 hover:to-indigo-700/70 transition-all duration-300 backdrop-blur-sm flex items-center gap-2"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            Refresh
                        </button>
                    </div>
                ) : (
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                        {users.map((user) => (
                            <div
                                key={user._id}
                                className="group relative bg-gradient-to-b from-gray-800/30 to-gray-900/50 border border-gray-700/30 rounded-2xl shadow-xl overflow-hidden transition-all duration-300 hover:border-purple-500/40 hover:shadow-purple-900/20 cursor-pointer transform hover:-translate-y-1.5"
                                onClick={() => navigate(`/users/${user._id}`)}
                            >
                                {/* Animated Background Elements */}
                                <div className="absolute inset-0 -z-10">
                                    <div className="absolute top-0 left-0 w-32 h-32 bg-purple-600/10 rounded-full blur-2xl -translate-x-1/2 -translate-y-1/2"></div>
                                    <div className="absolute bottom-0 right-0 w-40 h-40 bg-cyan-500/10 rounded-full blur-2xl translate-x-1/2 translate-y-1/2"></div>
                                </div>
                                
                                {/* Card Glow Effect */}
                                <div className="absolute inset-0 bg-gradient-to-br from-purple-900/10 to-blue-900/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                                
                                {/* User Card Content */}
                                <div className="p-5 relative z-10">
                                    <div className="flex items-center gap-4">
                                        {/* Avatar with Status Indicator */}
                                        <div className="relative">
                                            <div className="absolute -inset-1 bg-gradient-to-r from-purple-500 to-cyan-500 rounded-full blur opacity-20 group-hover:opacity-30 transition-opacity"></div>
                                            <div className="relative">
                                                <img 
                                                    src={"http://localhost:5000/images/default_profile.jpg"} 
                                                    className="w-16 h-16 rounded-full border-2 border-purple-500/80 shadow-lg group-hover:border-cyan-400/80 transition-colors"
                                                    alt={user.username}
                                                />
                                            </div>
                                        </div>
                                        
                                        {/* User Info */}
                                        <div className="flex-1 min-w-0">
                                            <h3 className="text-lg font-bold truncate bg-gradient-to-r from-purple-200/90 to-cyan-200/90 bg-clip-text text-transparent group-hover:from-purple-300 group-hover:to-cyan-300 transition-all">
                                                {user.username}
                                            </h3>
                                            <p className="text-sm text-gray-400 truncate mt-1">
                                                <span className="text-cyan-400">@{user.username.toLowerCase().replace(/\s+/g, '')}</span>
                                            </p>
                                            <p className="text-xs text-gray-500 mt-1">
                                                Joined {new Date(user.createdAt).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}
                                            </p>
                                        </div>
                                    </div>
                                    
                                    {/* Bio Preview */}
                                    <div className="mt-4 relative">
                                        <div className="absolute top-0 right-0 w-8 h-8 bg-gradient-to-l from-gray-900 to-transparent"></div>
                                        <p className="text-gray-300 text-sm line-clamp-2 italic">
                                            {user.bio || 'This user has not written a bio yet.'}
                                        </p>
                                    </div>
                                    
                                    {/* View Profile Button */}
                                    <div className="mt-5 flex justify-end">
                                        <div className="px-4 py-2 bg-gradient-to-r from-gray-800/50 to-gray-900/60 rounded-lg text-sm font-medium text-gray-300 group-hover:text-white group-hover:bg-gradient-to-r group-hover:from-purple-700/80 group-hover:to-indigo-700/80 transition-all duration-300 backdrop-blur-sm border border-gray-700/50 group-hover:border-purple-500/50 flex items-center gap-1.5 shadow group-hover:shadow-md group-hover:shadow-purple-900/20">
                                            View Profile
                                            <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                                            </svg>
                                        </div>
                                    </div>
                                </div>
                                
                                {/* Decorative Elements */}
                                <div className="absolute top-0 right-0 w-16 h-16 bg-gradient-to-l from-purple-500/10 to-transparent rounded-bl-full"></div>
                                <div className="absolute bottom-0 left-0 w-16 h-16 bg-gradient-to-r from-cyan-500/10 to-transparent rounded-tr-full"></div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}

export default UserList;

////UserListItem.jsx
// client/src/components/UserListItem.jsx
import React from 'react';
import { useNavigate } from 'react-router-dom';

const UserListItem = ({ user, onModalClose }) => {
  const navigate = useNavigate();

  const getAvatarSrc = (listUser) => {
    if (!listUser) return `https://ui-avatars.com/api/?name=?&background=71717a&color=fff&size=128`;
    const defaultAvatar = "http://localhost:5000/images/default_profile.jpg";
    if (listUser.avatar && listUser.avatar.startsWith('http')) return listUser.avatar;
    if (listUser.avatar && listUser.avatar.startsWith('/images/')) return `http://localhost:5000${listUser.avatar}`;
    return defaultAvatar;
  };

  const handleNavigate = () => {
    if (onModalClose) onModalClose(); // Close modal before navigating
    navigate(`/users/${user._id}`);
  };

  return (
    <div 
      onClick={handleNavigate}
      className="flex items-center p-3 hover:bg-gray-700/50 rounded-lg cursor-pointer transition-colors duration-200 group"
    >
      <img 
        src={getAvatarSrc(user)} 
        alt={user.username} 
        className="w-10 h-10 rounded-full object-cover mr-4 border-2 border-gray-600 group-hover:border-purple-500 transition-colors"
      />
      <div className="flex-1">
        <p className="font-semibold text-white group-hover:text-purple-300 transition-colors text-sm">{user.username}</p>
        {user.bio && <p className="text-xs text-gray-400 line-clamp-1">{user.bio}</p>}
      </div>
       <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-gray-500 group-hover:text-purple-400 transition-colors ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
      </svg>
    </div>
  );
};

export default UserListItem;

////UserProfile.jsx
// client/src/components/UserProfile.jsx
import React, { useEffect, useState, useCallback } from 'react';
import api from '../utils/api';
import { useNavigate, useParams } from 'react-router-dom';
import FollowListModal from './FollowListModal';

// Helper function to get current logged-in user ID
function getCurrentAuthUserId() {
  const token = localStorage.getItem('token');
  if (!token) return null;
  try {
    const decoded = JSON.parse(atob(token.split('.')[1]));
    return decoded.id;
  } catch (e) {
    return null;
  }
}

function UserProfile() {
  const navigate = useNavigate();
  const { userId: profileUserId } = useParams(); // Renamed to avoid conflict
  const [userData, setUserData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [expandedPosts, setExpandedPosts] = useState({});
  const [isFollowingProfile, setIsFollowingProfile] = useState(false);
  const [followInProgress, setFollowInProgress] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);
  const [modalListType, setModalListType] = useState('');

  const openFollowModal = (type) => {
    setModalListType(type);
    setModalOpen(true);
  };

  const currentAuthUserId = getCurrentAuthUserId(); // Logged-in user's ID

  const handleStartChat = async () => {
    try {
      // Call our new backend endpoint
      const res = await api.post('/chat/conversations', { receiverId: profileUserId });
      const conversation = res.data;

      // Navigate to the chat page, passing the newly created/found
      // conversation object in the navigation state.
      navigate('/chat', { state: { selectedConversation: conversation } });
    } catch (error) {
      console.error("Failed to start chat", error);
      // You could show a user-facing error here (e.g., with a toast notification)
    }
  };

  const fetchUserProfile = useCallback(async () => {
    setLoading(true);
    try {
      const res = await api.get(`/users/${profileUserId}`);
      setUserData(res.data);
      setIsFollowingProfile(res.data.isFollowing || false); // Set initial follow state
      setLoading(false);
    } catch (err) {
      console.error('Error fetching user profile:', err);
      navigate('/users'); // Redirect if profile not found or error
    }
  }, [profileUserId, navigate]);

  useEffect(() => {
    fetchUserProfile();
  }, [fetchUserProfile]);

  const handleFollowToggle = async () => {
    if (followInProgress || !currentAuthUserId) return; // Prevent action if not logged in or already processing
    setFollowInProgress(true);
    try {
      if (isFollowingProfile) {
        await api.delete(`/follow/${profileUserId}`);
        setIsFollowingProfile(false);
        // Optimistically update follower count if userData.user exists
        if (userData && userData.user) {
          setUserData(prev => ({
            ...prev,
            user: {
              ...prev.user,
              followerCount: Math.max(0, (prev.user.followerCount || 1) - 1) // Decrement
            }
          }));
        }
      } else {
        await api.post(`/follow/${profileUserId}`);
        setIsFollowingProfile(true);
        if (userData && userData.user) {
          setUserData(prev => ({
            ...prev,
            user: {
              ...prev.user,
              followerCount: (prev.user.followerCount || 0) + 1 // Increment
            }
          }));
        }
      }
    } catch (err) {
      console.error('Error toggling follow:', err.response ? err.response.data : err.message);
      // Optionally revert optimistic update on error or show a message
      // For simplicity, we'll just log it here.
    } finally {
      setFollowInProgress(false);
    }
  };

  const toggleExpand = (postId) => {
    setExpandedPosts(prev => ({ ...prev, [postId]: !prev[postId] }));
  };

  const getAvatarSrc = (user) => {
    if (!user) return `https://ui-avatars.com/api/?name=?&background=71717a&color=fff&size=128`;
    const defaultAvatar = "http://localhost:5000/images/default_profile.jpg";
    if (user.avatar && user.avatar.startsWith('http')) return user.avatar;
    if (user.avatar && user.avatar.startsWith('/images/')) return `http://localhost:5000${user.avatar}`;
    return defaultAvatar;
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-gray-900 via-slate-900 to-black">
        <div className="flex flex-col items-center"> <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-transparent border-t-purple-500 border-b-cyan-400 mb-4"></div> <span className="text-lg text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-cyan-400 font-medium"> Loading profile... </span> </div>
      </div>
    );
  }

  if (!userData || !userData.user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900 text-white">
        User not found.
      </div>
    );
  }

  return (
    <div className="flex-grow bg-gradient-to-br from-gray-900 via-slate-900 to-black text-white p-4 md:p-6 min-h-screen">
      <div className="max-w-5xl mx-auto">
        <div className="mb-6"> <button onClick={() => navigate('/users')} className="flex items-center gap-2 group px-5 py-3 bg-gradient-to-r from-gray-800/80 to-gray-900/80 hover:from-purple-900/90 hover:to-indigo-900/90 rounded-xl shadow-lg border border-gray-700 hover:border-purple-500/60 transition-all duration-300 backdrop-blur-sm hover:shadow-purple-900/30" > <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 group-hover:-translate-x-1 transition-transform text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 19l-7-7m0 0l7-7m-7 7h18" /> </svg> <span className="bg-gradient-to-r from-purple-300 to-cyan-300 bg-clip-text text-transparent font-medium"> Back to Users List </span> </button> </div>

        <div className="relative overflow-hidden bg-gray-800/50 border border-gray-700/50 rounded-2xl shadow-xl backdrop-blur-sm">
          <div className="absolute inset-0 -z-10"> <div className="absolute -top-[50%] -left-[50%] w-[200%] h-[200%] animate-spin-slow"> <div className="absolute inset-0 bg-[conic-gradient(from_90deg_at_50%_50%,#0f172a_0%,#1e293b_25%,#0f172a_50%,#1e293b_75%,#0f172a_100%)] opacity-20"></div> </div> </div>
          <div className="h-48 bg-gradient-to-r from-purple-900/80 via-indigo-900/80 to-blue-900/80 relative overflow-hidden"> <div className="absolute inset-0 bg-[radial-gradient(ellipse_at_center,_var(--tw-gradient-stops))] from-transparent via-transparent to-black/30"></div> <div className="absolute bottom-0 left-0 right-0 h-20 bg-gradient-to-t from-gray-800/70 to-transparent"></div> </div>

          <div className="p-6 md:p-8 relative">
            <div className="absolute left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-36 h-36 md:w-44 md:h-44 rounded-full border-4 border-gray-800/80 overflow-hidden shadow-2xl group hover:scale-105 transition-transform duration-300">
              <div className="relative w-full h-full">
                <div className="absolute inset-0 bg-gradient-to-br from-purple-600/20 to-cyan-500/20 rounded-full z-10 group-hover:opacity-0 transition-opacity"></div>
                <div className="absolute inset-0 rounded-full border border-white/10 shadow-inner"></div>
                <div className="absolute inset-0 ring-4 ring-transparent group-hover:ring-purple-500/30 transition-all duration-500 rounded-full"></div>
                <img src={getAvatarSrc(userData.user)} alt={`${userData.user.username}'s avatar`} className="w-full h-full object-cover" />
                <div className="absolute inset-0 bg-gradient-to-b from-transparent to-black/30"></div>
              </div>
            </div>

            <div className="mt-20 md:mt-24 text-center">
              <div className="inline-flex items-center justify-center px-4 py-1.5 bg-gradient-to-r from-purple-900 to-indigo-900 rounded-full mb-3 shadow-lg"> <span className="text-xs font-semibold tracking-wider text-purple-200">USER PROFILE</span> </div>
              <h1 className="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-300 via-blue-300 to-cyan-300 bg-clip-text text-transparent drop-shadow-lg"> {userData.user.username} </h1>
              <p className="text-gray-300 mt-3 max-w-xl mx-auto text-lg leading-relaxed italic"> {userData.user.bio || "This user hasn't written a bio yet."} </p>

              {/* Follower/Following Counts & Follow Button */}
              <div className="mt-6 flex flex-col sm:flex-row items-center justify-center gap-4 sm:gap-6 text-sm">
                <div className="flex gap-6">
                  <div
                    className="flex flex-col items-center p-3 bg-gray-900/50 rounded-xl backdrop-blur-sm border border-gray-700/50 min-w-[90px] text-center cursor-pointer hover:border-purple-500/70 transition-colors"
                    onClick={() => openFollowModal('followers')}
                    title="View Followers"
                  >
                    <span className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">
                      {userData.user.followerCount !== undefined ? userData.user.followerCount : '...'}
                    </span>
                    <span className="text-gray-400 mt-1 tracking-wider text-xs">FOLLOWERS</span>
                  </div>
                  <div
                    className="flex flex-col items-center p-3 bg-gray-900/50 rounded-xl backdrop-blur-sm border border-gray-700/50 min-w-[90px] text-center cursor-pointer hover:border-purple-500/70 transition-colors"
                    onClick={() => openFollowModal('following')}
                    title="View Following"
                  >
                    <span className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent">
                      {userData.user.followingCount !== undefined ? userData.user.followingCount : '...'}
                    </span>
                    <span className="text-gray-400 mt-1 tracking-wider text-xs">FOLLOWING</span>
                  </div>
                </div>

                {/* Follow/Unfollow Button - Show if not viewing own profile and logged in */}
                {currentAuthUserId && currentAuthUserId !== profileUserId && (
                <div className="flex items-center gap-4">
                  <button
                    onClick={handleFollowToggle}
                    disabled={followInProgress}
                    className={`px-6 py-2.5 rounded-lg font-semibold transition-all duration-300 shadow-md hover:shadow-lg
                            ${isFollowingProfile
                        ? 'bg-gradient-to-r from-gray-800/60 to-gray-900/70 border border-gray-700/60 rounded-xl hover:border-red-500/70 transition-all duration-300 backdrop-blur-sm hover:shadow-lg hover:shadow-red-900/30'
                        : 'bg-gradient-to-r from-gray-800/60 to-gray-900/70 border border-gray-700/60 rounded-xl hover:border-purple-500/70 transition-all duration-300 backdrop-blur-sm hover:shadow-lg hover:shadow-purple-900/30'
                      } 
                            ${followInProgress ? 'opacity-70 cursor-not-allowed' : ''}`}
                  >
                    <div className={`absolute inset-0 ${isFollowingProfile ? 'bg-gradient-to-r from-red-900/20 to-red-800/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl' : 'bg-gradient-to-r from-purple-900/20 to-blue-900/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-xl'}`}>
                    </div>
                    <span className="font-medium text-xs text-gray-200 group-hover:text-white">
                      {followInProgress
                        ? (isFollowingProfile ? 'Unfollowing...' : 'Following...')
                        : (isFollowingProfile ? 'Unfollow' : 'Follow')
                      }
                    </span>
                  </button>
                  <button
                    onClick={handleStartChat}
                    className="px-6 py-2.5 rounded-lg font-semibold transition-all duration-300 shadow-md hover:shadow-lg bg-gradient-to-r from-gray-800/60 to-gray-900/70 border border-gray-700/60 rounded-xl hover:border-cyan-500/70 backdrop-blur-sm hover:shadow-cyan-900/30"
                  >
                    <span className="font-medium text-xs text-gray-200 group-hover:text-white">
                      Message
                    </span>
                  </button>
                </div>
                )}
              </div>
              <div className="mt-2 text-xs text-gray-500">Joined: {new Date(userData.user.createdAt).toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}</div>
            </div>

            <div className="mt-10 md:mt-14">
              <div className="flex items-center justify-between mb-6 pb-3 border-b border-gray-700/70"> <h2 className="text-2xl font-bold"> Posts by <span className="text-transparent bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text drop-shadow-md">{userData.user.username}</span> </h2> <div className="text-sm text-gray-400 px-3 py-1 bg-gray-900/50 rounded-lg border border-gray-700/50 backdrop-blur-sm"> {userData.posts.length} {userData.posts.length === 1 ? 'post' : 'posts'} </div> </div>

              {userData.posts.length === 0 ? (
                <div className="text-center py-12"> <div className="inline-block p-5 bg-gray-900/50 rounded-full mb-4 border border-gray-700/50 backdrop-blur-sm"> <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" /> </svg> </div> <p className="text-lg text-gray-300">No posts yet</p> <p className="text-gray-500 mt-2 max-w-md mx-auto"> When {userData.user.username} creates posts, they'll appear here. </p> </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                  {userData.posts.map(post => (
                    <div key={post._id} className="group bg-gradient-to-b from-gray-800/40 to-gray-900/60 border border-gray-700/50 hover:border-purple-500/50 rounded-xl shadow-lg p-5 transition-all duration-300 hover:shadow-xl hover:shadow-purple-900/15 relative overflow-hidden backdrop-blur-sm transform hover:-translate-y-1" > <div className="absolute inset-0 -z-10 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-500"> <div className="absolute -inset-[2px] bg-gradient-to-r from-purple-500/10 to-cyan-400/10 rounded-xl blur-sm"></div> </div> <div className="absolute top-4 right-4"> <div className="h-8 w-8 rounded-full bg-gradient-to-br from-purple-900/20 to-indigo-900/20 backdrop-blur-sm flex items-center justify-center border border-gray-600/30"> <span className="text-xs font-bold bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent"> {post.content.length > 300 ? 'üìñ' : '‚úçÔ∏è'} </span> </div> </div> <h3 className="text-lg font-bold mb-3 pr-6 group-hover:text-purple-300 transition-colors bg-gradient-to-r from-purple-100/90 to-cyan-100/90 bg-clip-text text-transparent"> {post.title} </h3> {post.imageUrl && (<div className="mb-4 rounded-xl overflow-hidden border border-gray-700/50 group-hover:border-purple-500/30 transition-colors"> <img src={`${post.imageUrl.startsWith('/') ? 'http://localhost:5000' : ''}${post.imageUrl}`} alt={post.title} className="w-full h-48 object-cover group-hover:scale-[1.02] transition-transform duration-300" /> </div>)} <div className="relative min-h-[70px] mb-3"> {expandedPosts[post._id] ? (<p className="text-gray-300 leading-relaxed text-sm">{post.content}</p>) : (<> <p className="text-gray-300 line-clamp-3 leading-relaxed text-sm"> {post.content.substring(0, 120)} {post.content.length > 120 ? '...' : ''} </p> <div className="absolute bottom-0 left-0 right-0 h-8 bg-gradient-to-t from-gray-900/70 to-transparent rounded-b-xl"></div> </>)} </div> <button onClick={() => toggleExpand(post._id)} className="w-full py-2 text-xs font-medium rounded-lg bg-gradient-to-r from-gray-700/60 to-gray-800/60 border border-gray-700/60 hover:from-purple-800/80 hover:to-indigo-800/80 hover:border-purple-500/70 transition-all duration-300 group-hover:shadow-md group-hover:shadow-purple-900/20" > {expandedPosts[post._id] ? (<span className="flex items-center justify-center gap-2 text-gray-300 group-hover:text-white"> <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-cyan-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" /> </svg> Show less </span>) : (<span className="flex items-center justify-center gap-2 text-gray-300 group-hover:text-white"> <svg xmlns="http://www.w3.org/2000/svg" className="h-3.5 w-3.5 text-purple-400" fill="none" viewBox="0 0 24 24" stroke="currentColor"> <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" /> </svg> Read more </span>)} </button> </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div> {/* This closes the main content wrapper for the profile card */}
      {modalOpen && (
        <FollowListModal
          isOpen={modalOpen}
          onClose={() => setModalOpen(false)}
          userId={profileUserId}
          listType={modalListType}
        />
      )}
    </div>
  );
}

export default UserProfile;

///context
////SocketContext.jsx
// client/src/context/SocketContext.jsx
import { createContext, useState, useEffect, useContext } from 'react';
import io from 'socket.io-client';

const SocketContext = createContext();

// Create a custom hook to use the socket context easily in other components
export const useSocket = () => {
  return useContext(SocketContext);
};

export const SocketContextProvider = ({ children }) => {
  const [socket, setSocket] = useState(null);
  const [onlineUsers, setOnlineUsers] = useState([]);

  useEffect(() => {
    // Check for the auth token in localStorage
    const token = localStorage.getItem('token');
    
    // Only attempt to connect if the user is authenticated
    if (token) {
      // Establish the connection, passing the token for authentication
      const newSocket = io("http://localhost:5000", {
        auth: {
          token: token,
        },
      });

      setSocket(newSocket);

      // Listen for the 'getOnlineUsers' event from the server
      newSocket.on('getOnlineUsers', (users) => {
        setOnlineUsers(users);
      });

      // Cleanup on component unmount
      return () => {
        newSocket.close();
        setSocket(null);
      };
    } else {
      // If the user logs out or there's no token, close any existing socket
      if (socket) {
        socket.close();
        setSocket(null);
      }
    }
  }, []); // The empty dependency array ensures this runs only once on mount

  return (
    <SocketContext.Provider value={{ socket, onlineUsers }}>
      {children}
    </SocketContext.Provider>
  );
};

///utils
////api.js
// client/src/utils/api.js
import axios from 'axios';

// Get the token from localStorage
const token = localStorage.getItem('token');

// Create an Axios instance
const apiClient = axios.create({
  baseURL: 'http://localhost:5000/api',
  headers: {
    'Content-Type': 'application/json'
  }
});

// Add a request interceptor to set the Authorization header
apiClient.interceptors.request.use(
  config => {
    // Check if token exists in localStorage
    const storedToken = localStorage.getItem('token');
    if (storedToken) {
      // Set the Authorization header with the Bearer token
      config.headers.Authorization = `Bearer ${storedToken}`;
    }
    
    // For FormData requests, don't set Content-Type manually
    if (config.isFormData) {
      delete config.headers['Content-Type'];
    }
    
    return config;
  },
  error => {
    return Promise.reject(error);
  }
);

export default apiClient;

///App.css
@import "tailwindcss";

///App.jsx
// client/src/App.jsx
import React from 'react';
import { BrowserRouter as Router, Routes, Route, useNavigate, Outlet } from 'react-router-dom';
import AuthForm from './components/AuthForm';
import Dashboard from './components/Dashboard';
import Navbar from './components/Navbar';
import CreatePost from './components/CreatePost';
import EditPost from './components/EditPost';
import UserList from './components/UserList';
import UserProfile from './components/UserProfile';
import Footer from './components/Footer';
import { SocketContextProvider } from './context/SocketContext';
import ChatPage from './components/ChatPage';
import AboutPage from './components/AboutPage';
import './App.css';

const ProtectedLayout = () => {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();
  if (!token) {
    React.useEffect(() => { navigate('/login', { replace: true }); }, [navigate]);
    return null;
  }
  return (
    <Outlet />
  );
};

const PublicLayout = () => {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();
  if (token) {
    React.useEffect(() => { navigate('/dashboard', { replace: true }); }, [navigate]);
    return null;
  }
  return <Outlet />;
};


function AppContent() {
  const token = localStorage.getItem('token');
  const navigate = useNavigate();

  const handleLogout = () => {
    localStorage.removeItem('token');
    navigate('/login');
  };

  const mainContent = (
    <div className="flex flex-col min-h-screen bg-gray-900 text-white">
      <Navbar isAuthenticated={!!token} logout={handleLogout} />
      <main className="flex-grow">
        <Routes>
          <Route path="/about" element={<AboutPage />} />

          <Route element={<PublicLayout />}>
            <Route path="/login" element={<AuthForm isLogin />} />
            <Route path="/register" element={<AuthForm isLogin={false} />} />
            <Route path="/" element={<AuthForm isLogin />} />
          </Route>

          <Route element={<ProtectedLayout />}>
            <Route path="/dashboard" element={<Dashboard />} />
            <Route path="/create-post" element={<CreatePost />} />
            <Route path="/edit-post/:id" element={<EditPost />} />
            <Route path="/users" element={<UserList />} />
            <Route path="/users/:userId" element={<UserProfile />} />
            <Route path="/chat" element={<ChatPage />} />
            <Route path="/" element={<Dashboard />} />
          </Route>
        </Routes>
      </main>
      <Footer />
    </div>
  );

  // If the user is authenticated, wrap the entire content in the SocketContextProvider
  // Otherwise, render it without the provider.
  return token ? <SocketContextProvider>{mainContent}</SocketContextProvider> : mainContent;
}

export default function App() {
  return (
    <Router>
      <AppContent />
    </Router>
  );
}

///index.css
@import "tailwindcss";

/* Add to index.css */
.glass-card {
  background: rgba(255, 255, 255, 0.08);
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  border: 1px solid rgba(255, 255, 255, 0.18);
  box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
}

html, body, #root {
  height: 100%;
}

@keyframes bounce {
  0%, 100% { transform: scale(1); }
  30% { transform: scale(1.3); }
  60% { transform: scale(0.9); }
}

@keyframes fadeOut {
  0% { opacity: 1; transform: translateY(0); }
  100% { opacity: 0; transform: translateY(-20px); }
}

///main.jsx
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


/server
//controllers
///authController.js
// server/controllers/authController.js
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

exports.register = async (req, res) => {
  const { username, email, password } = req.body;
  try {
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = new User({ username, email, password: hashedPassword });
    await user.save();
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
    res.json({ token, userId: user._id, message: 'User registered successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.login = async (req, res) => {
  const { email, password } = req.body;
  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: 'Invalid credentials' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: 'Invalid credentials' });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
    res.json({ token, userId: user._id, message: 'User logged in successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

///chatController.js
// server/controllers/chatController.js
const Conversation = require('../models/Conversation');
const Message = require('../models/Message');
const User = require('../models/User');

// Get all conversations for the logged-in user
exports.getConversations = async (req, res) => {
  try {
    const userId = req.userId;
    const conversations = await Conversation.find({ participants: userId, hiddenBy: { $ne: userId } })
      .populate({
        path: 'participants',
        select: 'username avatar', // Populate participants with username and avatar
      })
      .populate({
        path: 'lastMessage',
        select: 'content sender createdAt', // Populate last message with its content
        populate: {
            path: 'sender',
            select: 'username' // And the sender of the last message
        }
      })
      .sort({ updatedAt: -1 }); // Sort by most recently active

    // We need to filter out the current user from the participants list
    // so the frontend knows who the "other" person is.
    const processedConversations = conversations.map(conv => {
        const convObject = conv.toObject();
        convObject.participants = convObject.participants.filter(p => p._id.toString() !== userId);
        return convObject;
    });

    res.json(processedConversations);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch conversations.' });
  }
};

// Get all messages for a specific conversation
exports.getMessages = async (req, res) => {
  try {
    const { conversationId } = req.params;
    const messages = await Message.find({ conversationId })
      .populate('sender', 'username avatar')
      .sort({ createdAt: 'asc' });

    res.json(messages);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch messages.' });
  }
};

// Creates a new conversation or finds an existing one
exports.createOrGetConversation = async (req, res) => {
  try {
    const senderId = req.userId;
    const { receiverId } = req.body;

    if (!receiverId) {
      return res.status(400).json({ error: "Receiver ID is required." });
    }

    // Check if a conversation between these two participants already exists
    const conversation = await Conversation.findOne({
      participants: { $all: [senderId, receiverId] },
    })
      .populate("participants", "-password") // Populate participants' details
      .populate({ // Populate the last message...
          path: 'lastMessage',
          populate: { path: 'sender', select: 'username' } //...and its sender
      });

    // If a conversation is found, return it
    if (conversation) {
      return res.status(200).json(conversation);
    }

    // If no conversation exists, create a new one
    const newConversation = new Conversation({
      participants: [senderId, receiverId],
    });

    await newConversation.save();

    // After saving, populate the fields to match the structure of a found conversation
    const populatedConversation = await Conversation.findById(newConversation._id)
        .populate("participants", "-password");

    res.status(201).json(populatedConversation);

  } catch (error) {
    console.error("Error in createOrGetConversation:", error);
    res.status(500).json({ error: 'Failed to create or get conversation.' });
  }
};

exports.hideConversation = async (req, res) => {
  try {
    const { conversationId } = req.params;
    const userId = req.userId;

    await Conversation.findByIdAndUpdate(conversationId, {
      $addToSet: { hiddenBy: userId }, // Use $addToSet to prevent duplicate entries
    });

    res.status(200).json({ message: 'Conversation hidden successfully.' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to hide conversation.' });
  }
};

// Unhide a conversation for the logged-in user
exports.unhideConversation = async (req, res) => {
  try {
    const { conversationId } = req.params;
    const userId = req.userId;

    await Conversation.findByIdAndUpdate(conversationId, {
      $pull: { hiddenBy: userId }, // Use $pull to remove the user's ID
    });

    res.status(200).json({ message: 'Conversation unhidden successfully.' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to unhide conversation.' });
  }
};

// Get all conversations that are hidden by the logged-in user
exports.getHiddenConversations = async (req, res) => {
  try {
    const userId = req.userId;
    // Find conversations where the user's ID IS in the hiddenBy array
    const conversations = await Conversation.find({ participants: userId, hiddenBy: userId })
      .populate({ path: 'participants', select: 'username avatar' })
      .populate({ path: 'lastMessage', select: 'content', populate: { path: 'sender', select: 'username' }})
      .sort({ updatedAt: -1 });

    const processedConversations = conversations.map(conv => {
        const convObject = conv.toObject();
        convObject.participants = convObject.participants.filter(p => p._id.toString() !== userId);
        return convObject;
    });

    res.json(processedConversations);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch hidden conversations.' });
  }
};
// --- We will add controllers for edit, delete, and hide here later ---

///commentController.js
const Comment = require('../models/Comment');
const Post = require('../models/Post');

// Create a new comment
exports.createComment = async (req, res) => {
    try {
        const { content, parentId } = req.body;
        const { postId } = req.params;
        const senderId = req.userId;
        // We need it to get the author's ID for notifications.
        const post = await Post.findById(postId);
        if (!post) {
            return res.status(404).json({ error: 'Post not found.' });
        }
        const commentData = new Comment({
            content,
            author: req.userId,
            post: postId
        });

        if(parentId) {
            const parentComment = await Comment.findById(parentId);
            if(!parentComment) {
                return res.status(404).json({ error: 'Parent comment not found' });
            }
            if(parentComment.post.toString() !== postId) {
                return res.status(400).json({ error: 'Parent comment does not belong to this post' });
            }
            commentData.parentId = parentId;
        }

        const comment = new Comment(commentData);
        await comment.save();
        post.comments.push(comment._id);
        await post.save();
        await comment.populate('author','username avatar');
        res.status(201).json(comment);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

// Get all comments for a post
exports.getComments = async (req, res) => {
    try {
        const comments = await Comment.find({post: req.params.postId})
        .populate('author', 'username avatar')
        .sort({ createdAt: -1 });
        res.status(201).json(comments);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

const deleteCommentAndChildren = async (commentId) => {
    // Find and delete children first
    const children = await Comment.find({ parentId: commentId });
    for (const child of children) {
        await deleteCommentAndChildren(child._id); // Recursive call
    }
    
    // Delete the comment itself
    const commentToDelete = await Comment.findById(commentId);
    if (commentToDelete) {
        // Remove from Post's comments array before deleting the comment
        await Post.findByIdAndUpdate(commentToDelete.post, { $pull: { comments: commentToDelete._id } });
        await Comment.findByIdAndDelete(commentId);
    }
};

// Delete a comment
exports.deleteComment = async (req, res) => {
    try {
        const comment = await Comment.findById(req.params.id);
        if (!comment) {
            return res.status(404).json({ error: 'Comment not found' });
        }
        if (comment.author.toString() !== req.userId) {
            return res.status(403).json({ error: 'Unauthorized to delete this comment' });
        }

        await deleteCommentAndChildren(req.params.id);

        res.json({ message: 'Comment and its replies deleted successfully' });
    } catch (err) {
        console.error("Error deleting comment:", err);
        res.status(500).json({ error: 'Failed to delete comment. ' + err.message });
    }
};

///followController.js
// server/controllers/followController.js
const User = require('../models/User');
const mongoose = require('mongoose');

// Follow a user
exports.followUser = async (req, res) => {
    const userIdToFollow = req.params.userIdToFollow;
    const currentUserId = req.userId;

    if (userIdToFollow === currentUserId) {
        return res.status(400).json({ error: "You cannot follow yourself." });
    }

    try {
        const userToFollow = await User.findById(userIdToFollow);
        const currentUser = await User.findById(currentUserId);

        if (!userToFollow || !currentUser) {
            return res.status(404).json({ error: "User not found." });
        }

        // Check if already following
        if (currentUser.following.includes(userIdToFollow)) {
            return res.status(400).json({ error: "You are already following this user." });
        }

        // Add to current user's following list
        currentUser.following.push(userIdToFollow);
        await currentUser.save();

        // Add to target user's followers list
        userToFollow.followers.push(currentUserId);
        await userToFollow.save();

        res.status(200).json({ message: "Successfully followed user." });

    } catch (err) {
        console.error("Error following user:", err);
        res.status(500).json({ error: "Failed to follow user. " + err.message });
    }
};

// Unfollow a user
exports.unfollowUser = async (req, res) => {
    const userIdToUnfollow = req.params.userIdToUnfollow;
    const currentUserId = req.userId;

    if (userIdToUnfollow === currentUserId) {
        return res.status(400).json({ error: "You cannot unfollow yourself." });
    }

    try {
        const userToUnfollow = await User.findById(userIdToUnfollow);
        const currentUser = await User.findById(currentUserId);

        if (!userToUnfollow || !currentUser) {
            return res.status(404).json({ error: "User not found." });
        }

        // Check if not following
        if (!currentUser.following.includes(userIdToUnfollow)) {
            return res.status(400).json({ error: "You are not following this user." });
        }

        // Remove from current user's following list
        currentUser.following.pull(userIdToUnfollow);
        await currentUser.save();

        // Remove from target user's followers list
        userToUnfollow.followers.pull(currentUserId);
        await userToUnfollow.save();

        res.status(200).json({ message: "Successfully unfollowed user." });

    } catch (err) {
        console.error("Error unfollowing user:", err);
        res.status(500).json({ error: "Failed to unfollow user. " + err.message });
    }
};

// Get users someone is following
exports.getFollowing = async (req, res) => {
    const userId = req.params.userId;
    try {
        const user = await User.findById(userId)
            .populate('following', 'username avatar bio'); // Populate with desired fields
        
        if (!user) {
            return res.status(404).json({ error: "User not found." });
        }
        res.status(200).json(user.following);
    } catch (err) {
        console.error("Error fetching following list:", err);
        res.status(500).json({ error: "Failed to fetch following list. " + err.message });
    }
};

// Get a user's followers
exports.getFollowers = async (req, res) => {
    const userId = req.params.userId;
    try {
        const user = await User.findById(userId)
            .populate('followers', 'username avatar bio'); // Populate with desired fields

        if (!user) {
            return res.status(404).json({ error: "User not found." });
        }
        res.status(200).json(user.followers);
    } catch (err) {
        console.error("Error fetching followers list:", err);
        res.status(500).json({ error: "Failed to fetch followers list. " + err.message });
    }
};

///postController.js
// server/controllers/postController.js
const Post = require('../models/Post');
const express = require('express');
const path = require('path');
const FileSystem = require('fs');

exports.createPost = async (req, res) => {
  const { title, content } = req.body;
  try {
    let imageUrl = '/images/default-post-image.jpg'; // Default image URL
    if (req.file) {
      imageUrl = `/images/${req.file.filename}`; // Use uploaded image URL
    }
    const post = new Post({
      title,
      content,
      author: req.userId,
      imageUrl
    });
    await post.save();
    res.status(201).json(post);
  } catch (err) {
    if(req.file) {
      FileSystem.unlink(req.file.path);
    }
    res.status(500).json({ error: err.message });
  }
};

exports.getPosts = async (req, res) => {
  try {
    const posts = await Post.find().populate('author', 'username').populate('likes', 'username').sort({ createdAt: -1 });

    const userId = req.userId;
    const enrichedPosts = posts.map(post => ({
      ...post.toObject(),
      isLiked: userId ? post.hasLikedBy(userId) : false,
      likeCount: post.likeCount
    }));
    res.json(enrichedPosts);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.deletePost = async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ error: 'Post not found' });
    if (post.author.toString() !== req.userId) return res.status(403).json({ error: 'Unauthorized' });
    await Post.findOneAndDelete({ _id: req.params.id }); // Use findOneAndDelete
    res.json({ message: 'Post deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getUserPosts = async (req, res) => {
  try {
    const posts = await Post.find({ author: req.userId }).populate('author', 'username').populate('likes', 'username');
    if (!post) return res.status(404).json({ error: 'Post not found' });
    
    const enrichedPost = {
      ...post.toObject(),
      isLiked: req.userId ? post.hasLikedBy(req.userId) : false,
      likeCount: post.likeCount
    };
    
    res.json(enrichedPost);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Edit Post
exports.updatePost = async (req, res) => {
  const { title, content } = req.body;
  try {
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ error: 'Post not found' });

    if (post.author.toString() !== req.userId) {
      return res.status(403).json({ error: 'Unauthorized' });
    }

    post.title = title || post.title;
    post.content = content || post.content;

    if(req.file) {
      post.imageUrl = `/images/${req.file.filename}`; // Update image URL if a new file is uploaded
    }

    await post.save();
    res.json(post);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.toggleLike = async (req, res) => {
  try {
    const post = await Post.findById(req.params.id);
    if (!post) return res.status(404).json({ error: 'Post not found' });
    const userId = req.userId;
    const isLiked = post.hasLikedBy(userId);
    if (isLiked) {
      // Unlike the post
      post.likes = post.likes.filter(id => !id.equals(userId));
    } else {
      // Like the post
      post.likes.push(userId);
    }
    await post.save();
    
    await post.populate('likes', 'username');
    
    const enrichedPost = {
      ...post.toObject(),
      isLiked: !isLiked,
      likeCount: post.likeCount
    };
    
    res.json(enrichedPost);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getPostById = async (req, res) => {
  try {
    const post = await Post.findById(req.params.id)
      .populate('author', 'username')
      .populate('likes', 'username');
      
    if (!post) return res.status(404).json({ error: 'Post not found' });
    
    const enrichedPost = {
      ...post.toObject(),
      isLiked: req.userId ? post.hasLikedBy(req.userId) : false,
      likeCount: post.likeCount
    };
    
    res.json(enrichedPost);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.serveImages = express.static(path.join(__dirname, '../uploads'));

///userController.js
// server/controllers/userController.js
const User = require('../models/User');
const Post = require('../models/Post');

// Get logged-in user's profile
exports.getProfile = async (req, res) => {
  try {
    const user = await User.findById(req.userId)
      .select('-password')
      .populate('followers', 'username avatar') // Populate for counts if needed, or rely on virtuals
      .populate('following', 'username avatar');
      
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    // Virtuals followerCount and followingCount should be available if schema is set correctly
    res.json(user); 
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.updateProfile = async (req, res) => {
  // ... (existing code for updateProfile, make sure avatar is handled if you allow direct URL update)
  const { username, email, bio, avatar } = req.body; // Include avatar
  try {
    const updateData = { username, email, bio };
    if (avatar) updateData.avatar = avatar; // Only update avatar if provided

    const user = await User.findByIdAndUpdate(
      req.userId,
      updateData,
      { new: true, runValidators: true }
    ).select('-password');
    
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    
    res.json(user);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
}

exports.deleteProfile = async (req, res) => {
  try {
    const userIdToDelete = req.userId;
    // Optional: Remove this user from other users' followers/following lists
    // This can be complex and resource-intensive. Consider if it's critical.
    // For now, we'll just delete the user. Their references in other lists will become dangling.
    // await User.updateMany({}, { $pull: { followers: userIdToDelete, following: userIdToDelete } });
    
    await Post.deleteMany({ author: userIdToDelete }); // Delete user's posts
    // Consider deleting user's comments and likes as well if desired

    await User.findByIdAndDelete(userIdToDelete);
    res.json({ message: 'Profile and associated data deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

exports.getAllUsers = async (req, res) => {
  try {
    const users = await User.find().select('-password -__v'); // Virtuals should be included
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Get any user's profile by ID (for public viewing)
exports.getUserProfile = async (req, res) => {
  try {
    const profileUser = await User.findById(req.params.id)
      .select('-password')
      .populate('followers', 'username avatar') // For counts and potential list display
      .populate('following', 'username avatar');

    if (!profileUser) return res.status(404).json({ error: 'User not found' });
    
    const posts = await Post.find({ author: req.params.id })
        .populate('author', 'username avatar') // Ensure avatar is populated for post author
        .populate('likes', 'username')
        .sort({ createdAt: -1 }); // Sort posts
    
    let isFollowing = false;
    if (req.userId) { // Check if a logged-in user is making the request
        const currentUser = await User.findById(req.userId);
        if (currentUser && currentUser.following.includes(profileUser._id)) {
            isFollowing = true;
        }
    }
    
    // Virtuals followerCount and followingCount will be on profileUser
    res.json({ 
        user: profileUser, 
        posts, 
        isFollowing // Add this flag
    });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

//middleware
///authMiddleware.js
// server/middleware/authMiddleware.js
const jwt = require('jsonwebtoken');

module.exports = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(401).json({ error: 'No token provided' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = decoded.id;
    next();
  } catch (err) {
    res.status(401).json({ error: 'Invalid token' });
  }
};

///uploadMiddleware.js
// server/middleware/uploadMiddleware.js
const multer = require('multer');
const path = require('path');

// Configure storage
const storage = multer.diskStorage({
  destination: function (req, res, cb) {
    cb(null, 'uploads/');
  },
  filename: function (req, file, cb) {
    cb(null, Date.now() + '-' + file.originalname);
  }
});

// File filter to only allow images
const fileFilter = (req, file, cb) => {
  if (!file.originalname.match(/\.(jpg|jpeg|png|gif)$/i)) {
    return cb(new Error('Only image files are allowed!'));
  }
  cb(null, true);
};

const upload = multer({ 
  storage,
  fileFilter,
  limits: { fileSize: 1024 * 1024 * 5 } // 5MB limit
});

module.exports = upload;

//models
///Comment.js
const mongoose = require('mongoose');

const commentSchema = new mongoose.Schema({
    content: { type: String, required: true },
    author: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    post: { type: mongoose.Schema.Types.ObjectId, ref: 'Post', required: true },
    parentId: { type: mongoose.Schema.Types.ObjectId, ref: 'Comment', default: null }, // Added for nesting
    createdAt: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model('Comment', commentSchema);

///Conversation.js
// server/models/Conversation.js
const mongoose = require('mongoose');

const ConversationSchema = new mongoose.Schema({
  // participants will contain the User IDs of the people in the conversation.
  // For a 1-on-1 chat, it will always be an array of two IDs.
  participants: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  }],

  // A direct reference to the last message sent in this conversation.
  // This is a great optimization for the conversation list UI,
  // so we don't have to do a separate query to show a preview.
  lastMessage: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Message',
  },

  // An array of User IDs for users who have "hidden" this conversation
  // from their chat list. This allows one user to hide it without
  // it disappearing for the other user.
  hiddenBy: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }]
}, {
  // `timestamps: true` automatically adds `createdAt` and `updatedAt` fields.
  // `updatedAt` is perfect for sorting conversations by the most recent activity.
  timestamps: true
});

module.exports = mongoose.model('Conversation', ConversationSchema);

///Message.js
// server/models/Message.js
const mongoose = require('mongoose');

const MessageSchema = new mongoose.Schema({
  conversationId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Conversation',
    required: true,
  },
  sender: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  content: {
    type: String,
    required: true,
  },
  isEdited: {
    type: Boolean,
    default: false,
  },
  isDeleted: {
    type: Boolean,
    default: false,
  },
  // We'll use a `readBy` array to track who has seen the message.
  // This is how you implement "seen" or "read" receipts.
  // It's more scalable than a simple boolean for potential group chats in the future.
  readBy: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }]
}, {
  timestamps: true
});

module.exports = mongoose.model('Message', MessageSchema);

///Post.js
// server/models/Post.js
const mongoose = require('mongoose');

const PostSchema = new mongoose.Schema({
  title: { type: String, required: true },
  content: { type: String, required: true },
  author: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  imageUrl: {
    type: String,
    default: '/images/default-post-image.png',
  },
  likes: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User'
  }],
  comments: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Comment'
  }],
  createdAt: {
    type: Date,
    default: Date.now
  }
});

// Add a virtual field for like count
PostSchema.virtual('likeCount').get(function () {
  return this.likes.length;
});

// Add a method to check if a user has liked the post
PostSchema.methods.hasLikedBy = function(userId) {
  return this.likes.some(like => like.equals(userId));
};

module.exports = mongoose.model('Post', PostSchema);

///User.js
// server/models/User.js
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  bio: { type: String, default: '' },
  avatar: { type: String, default: '/images/default_profile.jpg' }, // Ensure a default
  createdAt: {
    type: Date,
    default: Date.now
  },
  // New fields for followers/following
  followers: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
  following: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }]
});

// Virtuals for counts
UserSchema.virtual('followerCount').get(function() {
  return this.followers ? this.followers.length : 0;
});

UserSchema.virtual('followingCount').get(function() {
  return this.following ? this.following.length : 0;
});

// Ensure virtuals are included when converting to JSON/Object
UserSchema.set('toObject', { virtuals: true });
UserSchema.set('toJSON', { virtuals: true });

module.exports = mongoose.model('User', UserSchema);

//node_modules
//routes
///authRoutes.js
// server/routes/authRoutes.js
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

router.post('/register', authController.register);
router.post('/login', authController.login);

module.exports = router;

///chatRoutes.js
// server/routes/chatRoutes.js
const express = require('express');
const router = express.Router();
const chatController = require('../controllers/chatController');
const authMiddleware = require('../middleware/authMiddleware');

// All chat routes are protected
router.use(authMiddleware);

router.get('/conversations', chatController.getConversations);
router.get('/conversations/:conversationId/messages', chatController.getMessages);
router.post('/conversations', chatController.createOrGetConversation);
router.get('/conversations/hidden', chatController.getHiddenConversations);
router.post('/conversations/:conversationId/hide', chatController.hideConversation);
router.post('/conversations/:conversationId/unhide', chatController.unhideConversation);

// --- We will add routes for edit, delete, and hide here later ---

module.exports = router;

///commentRoutes.js
const express = require('express');
const router = express.Router();
const commentController = require('../controllers/commentController');
const authMiddleware = require('../middleware/authMiddleware');

router.use(authMiddleware);

router.post('/:postId/comments', commentController.createComment);
router.get('/:postId/comments', commentController.getComments);
router.delete('/:id', commentController.deleteComment);

module.exports = router;

///followRoutes.js
// server/routes/followRoutes.js
const express = require('express');
const router = express.Router();
const followController = require('../controllers/followController');
const authMiddleware = require('../middleware/authMiddleware');

// All follow-related routes require authentication
router.use(authMiddleware);

router.post('/:userIdToFollow', followController.followUser);
router.delete('/:userIdToUnfollow', followController.unfollowUser);

router.get('/:userId/following', followController.getFollowing);
router.get('/:userId/followers', followController.getFollowers);

module.exports = router;

///postRoutes.js
// server/routes/postRoutes.js
const express = require('express');
const path = require('path');
const router = express.Router();
const postController = require('../controllers/postController');
const authMiddleware = require('../middleware/authMiddleware');
const upload = require('../middleware/uploadMiddleware');

router.use(authMiddleware);

router.use('/images', express.static(path.join(__dirname, '../uploads')));

router.post('/', upload.single('image'), postController.createPost);
router.put('/:id', upload.single('image'), postController.updatePost);
router.post('/', postController.createPost);
router.put('/:id', postController.updatePost);
router.get('/', postController.getPosts);
router.get('/me', postController.getUserPosts);
router.get('/:id', postController.getPostById);
router.post('/:id/like', postController.toggleLike);
router.delete('/:id', postController.deletePost);

module.exports = router;
}

///userRoutes.js
// server/routes/userRoutes.js
const express = require('express');
const router = express.Router();
const userController = require('../controllers/userController');
const authMiddleware = require('../middleware/authMiddleware');

router.use(authMiddleware);

router.delete('/me', userController.deleteProfile);

router.get('/me', userController.getProfile);

router.get('/', userController.getAllUsers);

router.put('/me', userController.updateProfile);

router.get('/:id', userController.getUserProfile);

module.exports = router;

//socket
///socket.js
// server/socket/socket.js
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Conversation = require('../models/Conversation');
const Message = require('../models/Message');

const EDIT_DELETE_WINDOW_MS = 15 * 60 * 1000; 
// This object will map a userId to their currently active socketId
// e.g., { "60d...user_id...f7": "aBcDeFgHiJkL123" }
const userSocketMap = {};

function socketHandler(io) {
  // This is a Socket.IO middleware. It runs for every incoming connection.
  // Here, we verify the JWT sent by the client.
  io.use((socket, next) => {
    const token = socket.handshake.auth.token;
    if (!token) {
      return next(new Error("Authentication error: Token not provided."));
    }

    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      // Attach the userId to the socket object for future use
      socket.userId = decoded.id; 
      next();
    } catch (err) {
      return next(new Error("Authentication error: Invalid token."));
    }
  });

  io.on('connection', (socket) => {
    const userId = socket.userId;
    console.log(`User connected: ${userId} with socket ID: ${socket.id}`);

    // Add the connected user to our map
    userSocketMap[userId] = socket.id;

    // Emit an event to all connected clients to update online user lists
    io.emit('getOnlineUsers', Object.keys(userSocketMap));

    // Listen for 'sendMessage' events from a client
    socket.on('sendMessage', async ({ receiverId, content }) => {
      try {
        const senderId = socket.userId;

        // Find an existing conversation between the two users
        let conversation = await Conversation.findOne({
          participants: { $all: [senderId, receiverId] },
        });

        // If no conversation exists, create a new one
        if (!conversation) {
          conversation = new Conversation({
            participants: [senderId, receiverId],
          });
        }

        // Create the new message
        const newMessage = new Message({
          conversationId: conversation._id,
          sender: senderId,
          content,
          readBy: [senderId] // The sender has implicitly read the message
        });

        // Save the message and update the conversation's lastMessage
        // Using Promise.all to run these in parallel for efficiency
        const [savedMessage] = await Promise.all([
          newMessage.save(),
          Conversation.updateOne(
              { _id: conversation._id },
              { $set: { lastMessage: newMessage._id } }
          )
        ]);

        // Populate the sender details so the client can display it
        const messageToSend = await Message.findById(savedMessage._id).populate('sender', 'username avatar');

        // Check if the receiver is online
        const receiverSocketId = userSocketMap[receiverId];
        if (receiverSocketId) {
          // If they are online, send the message directly to their socket
          io.to(receiverSocketId).emit('newMessage', messageToSend);
        }

        // Also send the message back to the sender to confirm it was sent
        socket.emit('newMessage', messageToSend);

      } catch (error) {
        console.error("Error in sendMessage event: ", error);
        // Optionally, emit an error event back to the sender
        socket.emit('sendMessageError', { message: "Failed to send message." });
      }
    });

    socket.on('deleteMessage', async ({ messageId }) => {
      try {
        const userId = socket.userId;

        const message = await Message.findById(messageId);

        if (!message) {
          return socket.emit('messageError', { message: "Message not found." });
        }

        // Security check: ensure the user deleting the message is the one who sent it
        if (message.sender.toString() !== userId) {
          return socket.emit('messageError', { message: "You can only delete your own messages." });
        }

          const timeSinceSent = Date.now() - message.createdAt.getTime();
          if (timeSinceSent > EDIT_DELETE_WINDOW_MS) {
              return socket.emit('messageError', { message: "Time limit to delete this message has passed." });
          }

        // Soft delete: update the flag and content
        message.isDeleted = true;
        message.content = "This message was deleted.";
        await message.save();

        // Get the conversation participants to notify everyone in the chat
        const conversation = await Conversation.findById(message.conversationId);
        if (!conversation) return;

        // Emit an event to all participants in the conversation
        conversation.participants.forEach(participantId => {
          const participantSocketId = userSocketMap[participantId.toString()];
          if (participantSocketId) {
            io.to(participantSocketId).emit('messageDeleted', { 
                messageId: message._id, 
                conversationId: message.conversationId 
            });
          }
        });

      } catch (error) {
        console.error("Error in deleteMessage event: ", error);
        socket.emit('messageError', { message: "Failed to delete message." });
      }
    });

    socket.on('editMessage', async ({ messageId, newContent }) => {
      try {
        const userId = socket.userId;

        if (!newContent.trim()) {
          return socket.emit('messageError', { message: "Message content cannot be empty." });
        }

        const message = await Message.findById(messageId);

        if (!message) {
          return socket.emit('messageError', { message: "Message not found." });
        }
        
        // Security check: ensure the user editing the message is the sender
        if (message.sender.toString() !== userId) {
          return socket.emit('messageError', { message: "You can only edit your own messages." });
        }
        
        // Don't allow editing of already deleted messages
        if (message.isDeleted) {
          return socket.emit('messageError', { message: "Cannot edit a deleted message." });
        }

          const timeSinceSent = Date.now() - message.createdAt.getTime();
          if (timeSinceSent > EDIT_DELETE_WINDOW_MS) {
              return socket.emit('messageError', { message: "Time limit to edit this message has passed." });
          }

        // Update the content and set the edited flag
        message.content = newContent;
        message.isEdited = true;
        await message.save();

        const conversation = await Conversation.findById(message.conversationId);
        if (!conversation) return;

        // Emit an event to all participants in the conversation
        conversation.participants.forEach(participantId => {
          const participantSocketId = userSocketMap[participantId.toString()];
          if (participantSocketId) {
            io.to(participantSocketId).emit('messageEdited', {
              messageId: message._id,
              conversationId: message.conversationId,
              newContent: message.content,
            });
          }
        });

      } catch (error) {
        console.error("Error in editMessage event: ", error);
        socket.emit('messageError', { message: "Failed to edit message." });
      }
    });
    
    // --- We will add listeners for edit, delete, and read receipts here later ---

    socket.on('disconnect', () => {
      console.log(`User disconnected: ${userId}`);
      // Remove user from the map on disconnect
      delete userSocketMap[userId];
      // Update online user list for all clients
      io.emit('getOnlineUsers', Object.keys(userSocketMap));
    });
  });
}

module.exports = socketHandler;

//uploads
//.env
MONGO_URI=mongodb://localhost:27017/blogdb
JWT_SECRET=supersecretkey123
PORT=5000
REACT_APP_API_URL=http://localhost:5000

//app.js
// server/app.js
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const path = require('path');
// Import Node's built-in http module and the Server class from socket.io
const http = require('http');
const { Server } = require("socket.io");

// Import our new socket logic handler (we will create this file next)
const socketHandler = require('./socket/socket'); 

dotenv.config();

const app = express();
// Create an HTTP server from our Express app
const server = http.createServer(app);

// Create a new Socket.IO server and attach it to the HTTP server.
// It's crucial to configure CORS here as well for the WebSocket connection.
const io = new Server(server, {
  cors: {
    origin: "http://localhost:5173", // Your React client's URL
    methods: ["GET", "POST"]
  }
});

// Pass the `io` instance to our socket handler
socketHandler(io);

app.use(express.json());
app.use(cors());
app.use('/images', express.static(path.join(__dirname, 'uploads')));

// Routes
app.use('/api/auth', require('./routes/authRoutes'));
app.use('/api/posts', require('./routes/postRoutes'));
app.use('/api/users', require('./routes/userRoutes'));
app.use('/api/comments', require('./routes/commentRoutes'));
app.use('/api/follow', require('./routes/followRoutes'));
app.use('/api/chat', require('./routes/chatRoutes'));
// We will create and add the chat routes in a later step.

const PORT = process.env.PORT || 5000;

mongoose.connect(process.env.MONGO_URI).then(() => {
  console.log("Connected to MongoDB");
  // IMPORTANT: We now listen on the `server` instance, not the `app` instance.
  server.listen(PORT, () => { 
    console.log(`Server running on port ${PORT}`);
  });
}).catch(err => {
    console.error("MongoDB connection error:", err);
    process.exit(1);
});

I‚Äôm sharing my entire project ‚Äî the full folder structure, every script, module, and code file I've written. I want you to go through everything in extreme detail. Don‚Äôt just skim over the surface. I want you to truly understand how every piece fits together, what logic I‚Äôve applied, how I‚Äôve named things, and the overall flow of the program.
Assume I have zero technical knowledge ‚Äî no formal background in programming, software design, or computer science. Your role is to act like a deeply technical partner, but also a patient teacher who can walk me through not just what I‚Äôve written, but why it works (or doesn‚Äôt), what‚Äôs good, what needs fixing, and how I can go from ‚Äúbarely working‚Äù to something robust, scalable, and professional.
I don‚Äôt just want a shallow summary of what the code does ‚Äî I want you to break it down like you‚Äôre preparing a full review for a high-stakes software audit. Read through each file thoroughly. Understand my thinking, even if it‚Äôs flawed or inconsistent. Analyze the way I write logic, how I structure components, how I organize data, how I comment or don‚Äôt comment my code, how I use imports, how I handle edge cases (or forget to), and even what I might have intended but didn‚Äôt fully execute.
Once you‚Äôve read through the entire project, I want you to tell me clearly that you‚Äôve understood everything ‚Äî the logic, the structure, the way I build things, and what my current skill level looks like. Once we‚Äôre on the same page, I want you to help me upgrade this project ‚Äî turn it into something more powerful, feature-rich, professional, and advanced. That could mean improving performance, making the UX better, introducing new ideas or features, optimizing data handling, improving code readability and maintainability, or even implementing newer architectures or design patterns.
You should assume I‚Äôm building this project not just for fun, but as a serious portfolio piece ‚Äî something I might want to show a recruiter, investor, or collaborator. So your suggestions and improvements should reflect that level of depth and seriousness.
Treat this as if you‚Äôre being brought in as a senior engineer/mentor who has to fully understand a junior‚Äôs messy prototype and help transform it into a rock-solid system. Once you‚Äôre fully familiar with my code and ready to start improving it with me, let me know.